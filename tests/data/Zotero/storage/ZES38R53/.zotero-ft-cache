Iu."uEhuEuEEuEEuEuEEull m rA-A093 886 UNCLASSIFIED

MASSACHUSETTS INST OF TECH CAMBRIDGE EMACS MANUAL FOR TWENEX USERS.(U) SEP 80 R M STALLMAN AI-M-555

ARTIFICIAL INTE--ETC F/S 9/2
NOOSIA-75-C-O643 NL

maahahhhEahhi-

EIIIIIIIIIIIIu

EIIIEEEIIIEIIE

EmEEEEhEIIIE.hEEhIIIE

UNCLASS IFIED

,

-

SECURITY CLASSIFICATION OF THIS PAGE ("fion Dat. Enweed

REPORT DOCUMENTATION PAGE

BEFORERAEDCIONMSTPRLUECTITNIGONFSORM

REPORY NuM/ER

2. GOVT ACCESSION NO. 3. RECIPIENT'S CATALOG NUMBER

AIM 555
4. TITLE (and Subtitle)

/ ..
..

Es..

TYPE OP REPORT &

m OJ0E"eoeo,

/ MAC Manual for Twenex Users,,,;
7.AuTmOR(s) 7S.

Memorandum ~~
6. PERFORMING. ORG. REPORT NUMBER
-. CN CONTPACT OR GRANT NUMrR(,)

ft Richard M./Staliman7

I_0-O0~4-75-C-e643

9.

PAErRtFiOfRiMcINiGalORGIAnNtIZeAlTIlOiNgeNAnMcEe

AND ADDRESS
Laboratory

545 Technology Square

Cambridge, Massachusetts 02139

i. CONTROLLING OFFICE NAME AN0 ADDRESS
Advanced Research Projects Agency

1400 Wilson Blvd

Arlington, Virginia 22209

1" MONITORING AGENCY NAME & ADORESS(d
OOfIf icce offioNnNvavSaaylstemReesesrehnafrocrmh at

tr

Arlington, Virginia 22217

10. PROGRAM ELEMENT. PROJECT. TASK
-,-0J ,

"" '

-"'

qS OffIce)

'NUMBER OF PAGES 209
uc s , IS. SECURITY CLASS. (of Ihis reportj UNCLASSIFIED___________________

-

15*. ECASSIFICATION/DOWNGRADING

15. DISTRIBUTION STATEMENT (of this Report)

Distribution of this document is unlimited.

-

17. DISTRIBUTION STATEMENT (olth. abstract Intored in Block 20, i dlletant bIom Report)

19. SUPPLEMENTARY NOTES
None

IS. KEY WORDS (Continue an roer& ideit necesary aid Identify by block number)
Reference Manual Display Editor

i;

20. ABSTRACT (Continue on reverse ede ci o. sem and Identill, by b'eh n"e')
-This manual documents the use and simple customization of the display
editor EMACS with the Twenex (Officially known as '"TOPS-20) operating system. The reader is not expected to be a programmer. Even simple customizations do not require programming skill, but the user who is not interested in customizing can ignore the scattered customization hints. This is primarily a reference manual, but can also be used as a primer.,

DD I
,AN

1473

"0,TiON OF I NOVS ISOBSOLETE

4*fi0i

7 S/1

6601Y

E102-AG4-

UNCLASIFIE UNCLASSIFIED

e

a.

t

... ... . ...... .. ..

~~SE

.rod)._

C R_IT: C-:L: S :Ir lI ,A. I . . .. H, .

Da. t . Nnft-

1.-

it4 ,
81119 152:A.

Â£
MASSACHUSETTS INSTITUTE OF TECHNOLOGY ARTIFICIAL INTELLIGENCE LABORATORY

Al Memo 555

5 September 1980

EMACS Manual for TWENEX Users
by Richard M. Stallman
A reference manual for the extensible, customizable, self-documenting
real-time display editor
This manual corresponds to EMACS version 150

I_____i

This report describes work done at the Artificial Intelligence Laboratory of the Massachusetts Institute of Technology. Support for the laboratory's research is provided in part by the Advanced Research Projects Agency of the Department of Defense under Office of Naval Research contract N00014-75-C-0643.

Table of Contents
Table of Contents

AwCe S ,ion ior

17.

-TIS GRA&I

DTI!C TI-3

U:nnounced Jsiication-_

By

__ _ _ _-

Distribution/

AvalebilitY C 7: s I .i and/or

Dit

-.

l

Introduction

3

1. The Organization of the Screen

5

1.1. The Mode Line

6

2. Character Sets and Command Input Conventions

9

2.1. The 9-bit Command Character Set

9

2.2. Prefix Characters

10

2.3. Commands, Functions, and Variables

11

2.4. Notational Conventions for ASCII Characters

11

3. Basic Editing Commands

13

3.1. Inserting Text

13

3.2. Moving The Cursor

14

3.3. Erasing Text

14

3.4. Files

14

3.5. Help

15

3.6. Using Blank Lines Can Make Editing Faster

15

4. Giving Numeric Arguments to EMACS Commands

17

4.1. Autoarg Mode

18

5. Extended (Meta-X) Commands and Functions

19

5.1. Issuing Extended Commands

19

5.2. Arcane Information about M-X Commands

22

6. Moving Up And Down Levels

25

6.1. Subsystems

25

6.2. Recursive Editing Levels

26

6.3. Exiting Levels; Exiting EMACS

27

6.4. Running Subforks under EMACS

27

6.5. Reading Mail

30

7. Self-Documentation Commands

31

8. The Mark and the Region

33

8.1. Commands to Mark Textual Objects

34

_J

EMACS Manual for TWENEX Users

8.2. The Ring of Marks

34

9. Killing and Moving Text

37

9.1. Deletion and Killing

37

9.2. Un-Killing

39

9.3. Other Ways of Copying Text

41

10. Searching

43

11. Commands for English Text

45

11.1. Word Commands

45

11.2. Sentence and Paragraph Commands

47

11.3. Indentation Commands for Text

48

11.4. Text Filling

50

11.5. Case Conversion Commands

51

11.6. Dissociated Press

52

12. Commands for Fixing Typos

55

12.1. Killing Your Mistakes

55

12.2. 1ransposition

56

12.3. Case Conversion

56

13. File Handling

57

13.1. Visiting Files

57

13.2. How to Undo Drastic Changes to a File

59

13.3. Auto Save Mode: Protection Against Disasters

59

13.4. Listing a File Directory

61

13.5. Cleaning a File Directory

61

13.6. DIRED, the Directory Editor Subsystem

62

13.7. Miscellaneous File Operations

64

14. Using Multiple Suffers

67

14.1. Creating and Selecting Buffers

67

14.2. Using Existing Buffers

68

14.3. Killing Buffers

69

15. Controlling the Display

71

16. Two Window Mode

73

16.1. Multiple Windows and Multiple Buffers

74

17. Narrowing

77

18. Commands for Manipulating Pages

79

18.1. Editing Only One Page at a Time

80

Table of Contents
19. Replacement Commands
19.1. Query Replace 19.2. Other Search-and-loop Functions 19.3. TECO Search Strings
20. Editing Programs
20.1. Major Modes 20.2. Indentation Commands for Code 20.3. Automatic Display Of Matching Parentheses 20.4. Manipulating Comments 20.5. Lisp Mode and Muddle Mode 20.6. Lisp Grinding 20.7. Editing Assembly-Language Programs 20.8. Major Modes for Other Languages
21. The TAGS Package. 21.1. How to Make a Tag Table for a Program 21.2. Flow to Tell EMACS You Want to Use TAGS 21.3. Jumping to a Tag 21.4. Other Operations on Tag Tables 21.5. What Constitutes a Tag 21.6. Adding or Removing Source Files 21.7. How a Tag Is Described in the Tag Table 21.8. Tag Tables for INFO Structured Documentation Files
22. Simple Customization 22.1. Minor Modes 22.2. Libraries ot Commands 22.3. Variables 22.4. The Syntax Table 22.5. FS Flags 22.6. Init Files and EVARS Files 22.7. Local Variables in Files 22.8. Keyboard Macros
23. The Minibuffer
24. Correcting Mistakes and EMACS Problems 24.1. Quitting and Aborting 24.2. Dealing with Common Forms of EMACS Lossage 24.3. Undoing Changes to the Buffer 24.4. Journal Files 24.5. Reporting Bugs
25. Word Abbreviation Input 25.1. Basic Usage

iii
83
83 84 85
87
87 88 89 90 92 95 96 97
99 99 100 101 101 104 104 105 106
107 107 108 109 111 113 114 118 119
123
125 125 126 128 129 132
135 136

iv

EMACS Manual for TWENEX Users

25.2. Advanced Usage

139

25.3. Teco Details for Extension Writers

142

26. The PICTURE Subsystem, an Editor for Text Pictures

143

27. Sorting Functions

145

Appendix I. Particular Types of Terminals

147

I.1. Ideal Keyboards

147

1.2. Keyboards with an "Edit" key

147

1.3. ASCII Keyboards

148

1.4 Upper-case-only Terminals

148

1.5. The SLOWLY Package for Slow Terminals

149

Appendix II. Use of EMACS from Printing Terminals

153

Glossary

155

Command Index

163

Catalog of Libraries

179

Index of Variables

183

EMACS Command Chart (as of 7/26/80)

189

Index

197

V\

Preface

1

Preface

This manual documents the use and simple customization of the display editor EMACS with the Twenex (officially known as "TOPS-20") operating system. The reader is not expected to be a programmer. Even simple CUstomizations do not require programming skill, but the user who is not interested in customizing can ignore the scattered customization hints.
This is primarily a reference manual, but can also be used as a primer. However, I recommend that the newcomer first use the on-line, learn-by-doing tutorial TEACH-EMACS. With it, you learn EMACS by using EMACS on a specially designed file which describes commands, tells you when to try them. and then explains the results you see. This gives a more vivid introduction than a printed manual.
On first reading, you need not make any attempt to memorize chapters I and 2, which describe the notational conventions of the manual and the general appearance of the EMACS display screen. It is enough to be aware of what questions are answered in these chapters, so you can refer back when you later become interested in the answers. After reading the Basic Editing chaplter you should practice the commands there. The next few chapters describe fundamental techniques and concepts that are referred to again and again. It is best to understand them thoroughly, experimenting with them if necessary.
To find tle documentation on a particular command. took in the index if you know what the command is. If you know vaguely what the command does, look in the command index. The command index contains a line or two about each command, and a cross-reference to the section of the manual that describes the command in more detail; related commands are grouped together. rhere is also a glossary, with a cross reference for each term.
The manual is available in three forms: the published form, the LPT form, and the INFO form. The published form is printed by the Artificial Intelligence lab. The LPT form is available on line for printing en unsophisticated hard copy devices such as terminals and line printers. The INFO form is for on-line perusal with the INFO program. All three forms are substantially the same. There are also two versions of the text: one for use with ITS, MIT's Incompatible Timesharing System, and one for use with Twenex. Both versions are available in all three forms.
EMACS is available for distribution for use on Tenex and Twenex systems (It does not run on Bottoms-1O, and the conversion would not be easy). Mail us a 2400 foot mag tape if you want it. It does not cost anything; instead, you must join the EMACS software-sharing commune. The conditions of membership are that you must send back any improvements you make to EMACS, including any libraries you write, and that you must not redistribute the system except exaclly as you got it, complete. (You can also distribute your customizations, separately.) It is pathetic to hear from sites

2

EMACS Manual tor TWENEX Users

that received incomplete copies lacking the sources, asking me years later whether sources are available.
For information on the underlying philosophy of EMACS and the lessons learned from its development, write to me for a copy of Al memo 519, "EMACS, the Extensible, Customizable Self-Documenting Display Editor", or send Arpanet mail to RMS@MIT-AI.
Yours in hacking,
/ 2 \ 1/2 <X >
\/
Richard M. Stallman Artificial Intelligence Lab 545 Tech Square, Rm 913 Cambridge, MA 02139 (617) 253-6765

=

Introduction

3

Introduction

You are about to read about EMACS, an advanced, self-documenting. customizable, extensible real-time display editor.
We say that EMACS is a display editor because normally the text being edited is visible oil the screen and is updated automatically as you type your commands. See section 1 [Displayl, page 5.
We call it a real-time editor because the display is updated very frequently, usually after each character or pair of characters the user types. This minimizes the amount of intormation you must keep in your head as you edit. See section 3 [Basic], page 13.
We call EMACS advanced because it provides facilities that go beyond simple insertion and deletion: filling of text; atomatic indentation of programs; viewing two files at once; and dealing in terms of characters, words, lines, sentences, paragraphs, and pages, as well as expressions and comments in several different programming languages. It is much easier to type one command meaning "go to the end of the paragraph" than to find the desired spot with repetition of simpler commands.
Self-documenting means that at any time you can type a special character, the "Help" key, to find out what your options are. You can also use it to find out what any command does, or to find all the commands that pertain to a topic. See section 7 tHelpi, page 31.
Customizable means that you can change the definitions of EMACS commands in little ways. For example, if you use a programming language in which comments start with (** and end with **>, you can tell the EMACS comment manipulation commands to use those strings. Another sort of customization is rearrangement of the command set. For example, if you prefer the four basic cursor motion commands (up, down, left and right) on keys in a diamond pattern on the keyboard, you can have it. See section 21.8 [Customization], page 106.
Extensible means that you can go beyond simple customization and write entirely new commands, programs in the language TECO. EMACS is an "on-line extensible" system, which means that it is divided into many functions that call each other, any of which can be redefined in the middle of an editing session. Any part of EMACS can be replaced without making a separate copy of all of EMACS. Many already written extensions are distributed with EMACS, and some (including DIRED, PAGE, PICTURE, SORT, TAGS, and WORDAB) are documented in this manual. Although only a programmer can write an extension, anybody can use it afterward.
Extension requires programming in TECO, a rather obscure language. If you are clever and bold, you might wish to learn how. See the file INFO:CONV.INFO, for advice on learning TECO. This manual does not even try to explain how to write TECO programs, but it does contain some notes that are useful primarily to the extension writer.

I--

.--

nl

..

4

EMACS Manual for TWENEX Users

The Organization of the Screen

5

Chapter One The Organization of the Screen

EMACS divides the screen into several areas, each of which contains its own sorts of information. The biggest area, of course, is the one in which you usually see the text you are editing. The terminal's cursor usually appears inl tile middle of the text, showing the position of point, the location at which editing takes place. While the cursor appears to point at a character, point should be thought of as between two characters; it points before the character that tle cursor appears on top of. Terminals have only one cursor, and when output is in progress it must ippear where fhe typing is being done. This does not mean that point is moving. Itis only that EMACS has no way to show you the location of point except wh en the terminJal is idle.
(he top linez of the screen are usually available for text but are sometimes pre-empted by an error niessage, which says that soine command you gave was illegal or used improperly, or by typeout from a commmnd (suCh as, a listing of a file directory). Error messages are typically one line. end with a question mark, and are accompanied by ringing the bell. Typeout geneially has non e of those characteristics.
The error message or typeout appears there for your information, but it is not part of the file you are editing, and it goes away if you type any command. If you want to make it go away immediately but not do anything else, you can type a Space. (Usually a Space inserts itself, but when there is an error message or typeout on the screen it does nothing but get rid of that.) The terminal's cursor always appears at the end of the error message or typeout, but this does not mean that point has moved. The cursor moves back to the location of point alter the error message or typeout goes
away.
If you type a question mark when an error message is on the screen, you enter the EMACS error handler. You probably don't want to do this unless you know how to write TECO programs. Enough said.
A few lines at the bottom of the screen compose what is called the echo area. Echoing means printing out the commands that you type. EMACS commands are usually not echoed at all, but if you pause for more than a second in the middle of a multi-character command then all the characters typed so far are echoed. This is intended to prompt you for the rest of the command. The rest of the command is echoed, too, as you type it. This behavior is designed to give confident users optimum response, while giving hesitant users information on what they are doing.
EMACS also uses the echo area for reading and displaying the arguments for some commands, such as see rches, and for printing brief information in response to certain commands.

6

EMACS Manual for TWENEX Users

The line above the echo area is known as the mode bine. It is the line that usually starts with "EMACS (something)". Its purpose is to tell what is going on in the EMACS, and to show any reasons why commands may not be interpreted in the standard way. The mode line is very important, and it you are surprised by how EMACS reacts to your commands you should look there for enlightenment.
1.1. The Mode Line
The normal situation is that characters you type are interpreted as EMACS commands. When this is so, you are at top level, and the mode line has this format:
EMACS (major minor) bfr: file --pos-- *
major is always the name of the major niode you are in. At any time, EMACS is in one and only one of its possible major modes. The major modes available include Fundamental mode (which EMACS starts out in), Text mode, Lisp mode, PASCAL mode, and others. See section 20.1 [Major ModesJ. page 87, for details of how the modes differ and how to select one. Sometimes the name of the major mode is followed immediately with another name inside square-brackets ("[ - 1"). This name is called the suhmode. The submode indicates that you are "inside" of a command that causes your editing commands to be changed temporarily, but does not change what text you are editing. A submode is a kind of recursive editing level. See seclion 6.2 [Submodes], page 26.
'minor is a list of some of the minor modes that are turned on at the moment. "Fill" means that Auto Fill mode is on. "Save" means that Auto-saving is on. "Save(off)" means that Autol-saving is oii in general but momentarily turned off (it was overridden the last time a file was selected). "Atom" means th;.t Atom Word mode is on. "Abbrev" means that Word Abbrev mode is on. "Ovwrt" means that Overwrite mode
is on. See section 22.1 [Minor Modesl, page 107, for more information. "Def" means that a keyboard macro is being defined; although this is not exactly a minor mode, it is still useful to be reminded about. See section 22.8 [Keyboard Macros], page 119.
fr is the name of the currently selected buffer. Each buffer has its own name and holds a file being edited; this is how EMACS can hold several files at once. But at any time you are editing only one of them, the selected buffer. When we speak of what some command does to "the buffer", we are talking about the currently selected buffer. Multiple buffers make it easy to switch around between several files, and then it is very useful that the mode line tells you which one you are editing at any time. However. helore y( u learn how to use multiple buffers, you will always be in the buffer called "Main". which is the only one that exists when EMACS starts up. If the name of the buffer is the same as the first name of the file you are visiting, then the buffer name is left out of the mode line. See section 14 (Buffers], page 67, for how to use more than one buffer in one EMACS.
file is the name of the file that you are editing. It is the last tile that was visited in the buffer you are in. If "(RO)" (for "read only") appears after the filename, it means that if you visit another file in the same buffer then changes you have made to this file will be lost unless you have explicitly asked to save them. See section 13.1 [Visiting), page 57. for more information. If there is no "(RO)" and you visit another file in the same buffer, EMACS will offer to save your changes first, if there are any changes.

-11

. P .F!r I

-

..--

The Organization of the Screen

7

The star at the end of the mode line means that there are changes in the buffer that have not been saved in the file. If the file has not been changed since it was read in or saved, there is no star.
pos tells you whether there is additional text above the top of the screen, or below the bottom. If your file is small and it is all on the screen, -- pos-- is omitted. Otherwise, it is -- TOP-- if you are looking at the beginning ot the tile, -- BOT-- if you are looking at the end of the file, or -- nn%-- where in is the percentage of the file above the top of the screen.
Sometimes you will see -- MORE-- instead of -- nn%--. Thi.; happens when typeout from a command is too long to fit on the s(ceen. It means that if you type a Space the next screenful of information will be printed. If you are not interested, typing anything but a Space will cause the rest of the output to be discarded. Typing a Rubout will discard the output and do nothing else. Typing any other (umina-id will discard the rest of the output and also do the command. When the olitput is discarded, "FLUSHED" is printed after the -- MORE--.
So much for what the mode line says at top level. When the mode line doesn't start with "EMACS", and doesn't look anything like the hreaksduvn given above, then EMACS is not at top level, and your typing will not be undtstood in the usual way. This is because you are inside a subsystel. such as INFO (See section 6.1 [Subsystems], page 25.), or in a recursive editing level, such as Edit Options (See section 6.2 [Recursive Editing], page 26.). The mode line tells you what command you are inside.
In particular, if the mode line begins with a bracket '[" or a parenthesis "(", you are inside a recursive editing level or a minibUfter (See section 23 IMinibUffer], page 123.).
If you are accustomed to other display editors, you may be surprised that EMACS does not always display the page number and line number of point in the mode line. This is because the text is stored in a way that makes it difficult to compute this information. Displaying them all the time would be too slow to be borne. When you want to know the page and line number of point, you must ask for the information with the M-X What Page command. See section 18 [Pagesj, page 79. However, once you are adjusted to EMACS, you will rarely have any reason to be concerned with page numbers or line numbers.

8

EMACS Manual for TWENEX Users

Character Sets and Command Input Convtiiitoiis

9

Chapter Two
Character Sets and Command Input Conventions

In this chapter we introduce the ternirnlogq and conc-plt, used to talk about

EMAC:S commands. In particular, EMACS is

iottlial I' liiof keyboard with two

special shift keys which can type 512 different clir; ac' e'.,tead of the 128 which

ordinary ASCII keyboards can send.

2.1. The 9-bit Command Character Set

EMACS is designed ideally to be used wilh terminal3 whose keyboards have a pair of shilt keys, labelled "Control" and "Meta", either or hoh of which can be combined with any character that you can type. These shift keys produce Control characters and Meta characters, which are the editing comiriands of [MACS. Ordinary characters like "A" which are neither Control nor Meta are used for inserting text. We name each of these characters by prefixin(; "Control " or "Meta -"(abbreviated "C-" and "M-") to the character: thus, Meta-F or M-1 is the chaiacter which is F typed with the Meta key held down. Control in the EMACS command character set is not precisely the same as Control in the ASCII character set, but the general purpose is the same.

The 128 characters, multiplied by the four possibilities of the Control and Meta keys, make 512 characters in the EMACS command character set. So il is called the 512-character set to distinguish it from ASCII, which has only 128 characters. It is also called the 9-bit character set because 9 bits are required to express a number from 0 to 511. Note that the 512-character set is useit only for keyboard commands.
Characters in files being edited with EMACS are ASII characters.

Sadly, most terminals do not have ideal EMACS keyboards. In fact, the only ideal keyboards are at MIT, so yours is certain not to be ide;jI. On nonideal keyboards, the Control key is somewhat limited (it can only be courbined with some characters, not with all), and the Meta key may not exist at all. We make it paossible to use EMACS on a nonideal terminal by providing two-charactrt circumlocutions, made up of characters that you can type, for the characlef,; that you can't type. These circumlocutions start with a bit prefix character; see bclow. Also see the appendix for more detailed information on what to do on your type of terminal.

It may seem an unfortunate coincidence that hoth the EMACS 9-bit character set

and the ASCII character set use the term "Control" for not exactly the same thing.
-- ___________

,~

4i

10

EMACS Manual for TWENEX Users

This came about because the 9-bit character set was invented by generalizing ASCII. In ASCII, only letters and a few punctuation marks can be made into Control characters; we wanted to have a Control version ol evet y charrter. For example, we have Control-Space, Control-digits, and Control-=. We also have Control-A and Control-a which are two different characters however, all such pairs have the same meaning as EMACS commands, so you can forget about this quirk of the character set unless you begin customizing. In practice, you can forget all about the distinction between ASCII Control and EMACS Control, except to realize that EMACS uses some "Control" characters which are not on your keyboard.
In addition to the 9-bit command charactei set. there is one extra character called Help. It cannot be combined with Control or Meta. Its use is to ask for documentation, at any lime. Like the 9-bit characters, the Ilelp character has its own key on an ideal keyboard, but must be represented by somelhing else on other keyboards. The usual choice is Control-Underscore, code 337 (octal). What this means is that the 9-bit character Control-Underscore cannot be used because it is translated to Help instead. The code used ititernally for Help is,11 10 (octal).
We have given some command characters special names which we always capitalize. "Return" or "<cr)" stands for the carriage return character, code 015 (all character codes are in octal). Note that C-R means the character Control-R, never Return. "Rubout" is the character with code 177. labeled "Delete" on some keyboards. "Altmode" is the character with code 033, sometimes labeled "Escape". Other command characters with special names are Tab (code 011), Backspace (code 010), Linefeed (code 012), Space (code 040), Excl ("!", code 041), Comma (code 054), and Period (code 056). Control is represented in the numeric code for a character by 200, and Meta by 400; thus, Meta-Period is code 456 in the 9-bit character set.
2.2. Prefix Characters
A non-ideal keyboard can only send certain Control characters, and may completely lack the ability to send Meta characters. To use these commands on such keyboards, you need to use two-character circumlocutions starting with a bit prefix character which turns on the Control or Meta bit in the second character. The Altmode character turns on the Meta bit, so Altmode X can be used to type a Meta-X, and Altmode Control-O can be used to type a C-M-O. Altmode is known as the Metizer. Other bit prefix characters are C-- for Control, and C-Z for Control and Meta together. Thus, C-^ < is a way of typing a Conlrol-<, and C--Z < can be used to type C-M-<. Because C-- is awkward to type on most keyboards, we have tried to minimize the number of commands for which you will need it.
The bit prefix characters are simply commands which run the functions -R Prefix Control, -R Prefix Meta, and -R Prefix Control Meta.
There is another prefix character, Control-X which is used as the beginning of a large set of two-character commands known as C-X commands. C-X is not a bit prefix character; C-X A is not a circumlocution for any single character, and it must be typed as ;wo characters on any terminal.

Character Sets and Command Input Conventions

11

2.3. Commands, Functions, and Variables
Most of the EMACS commands documented herein are members of this 9-bit character set. Others are pairs of characters from that set. However, EMACS doesn't really define commands directly. Instead, EMACS defines functions, which have long names such as "-R Down Real Line", and then the functions are connected to commands such as C-N through a dispatch table. When we say that C-N moves the cursor down a line, we are glossing over a distinction which is unimportant for ordinary use, but essential for customization: it is the function -R Down Real Line which knows how to move down a line, and C-N moves down a line because it is connected to that function. We usually ignore this subtlety to keep things sinple. To give the extension-writer the information he needs, we state the name of the function which really does the work in parentheses after mentioning the command name. For example: "C-N (-R Down Real Line) moves the cursor down a line". In the EMACS wall chart, the function names are used as a form of very brief documentation for the command characters. See section 5.2 [Functions], page 22.
The "'R " which appears at the front of the function name is simply part of the name. By convention, a certain class of functions have names which start with " R ".
While we are on the subject of customization informiation which you should not be frightened of, it's a good time to tell you about vatiables. Often the description of a command will say "to change this, set the variable Mumble Foo". A variable is a name used to remember a value. EMACS contains mna;y variables which are there so that you can change them if you want to customize. The variable's value is examined by some command, and changing the value makes the command behave differently. Until you are interested in customizing, you can ignore this information. When you are ready to be interested, read the basic information on variables, and then the information on individual variables will make sense. See seltion 22.3 [Variables], page 109.
2.4. Notational Conventions for ASCII Characters
Control characters in files, your EMACS buffer, or TECO programs, are ordinary ASCII characters and are represented as uparrov, or caret followed by the corresponding non-control character: control-E is represented as tE. The special 9-bit character set applies only to typing EMACS commands.
CRLF is the traditional term for a carriage return followed by a linefeed. This sequence of two characters is what separates lines in text being edited. Normally, EMACS commands make this sequence appear to be a single character, but TECO code must deal with the realities. A return or a linefeed which is not part of a CRLF is called "stray". EMACS usually treats them as part of the line and displays them as -M and -J. The TECO flag FS -M PRINT4 contiols how they are displayed. See section 22.5 [FS Flags], page 113.
Other ASCII characters with special names include tab (01 1), backspace (010), linefeed (012), altmode (033), space (040), and rubout (177). To make it clear whether

12

EMACS Manual for TWENEX Users

we are talking about a 9-bit character or an ASCII character, we capitalize names of 9-bit characters and leave names of ASCII characters in lower case. Note that the 9-bit characters Tab and Control-I are different, but the ASCII characters tab and control-I are the same.
Most control characters when present in the EMACS buffer are displayed with a caret; thus, -A for ASCII tA. Rubout is displayed as -?, because by stretching the meaning of "control" it can be interpreted as ASCII control-?. A backspace is usually displayed as -H since it is ASCII control-H, because most displays cannot do overprinting.
Altmode is the ASCII code 033, sometimes labeled "Escape" or "Alt". Altmode is often represented by itself in this document (remember, it is an ASCII character and can therefore appear in files). It looks like this: 0. On some terminals, altmode looks just like the dollar sign character. If that's so on yours, you should assume that anything you see in the on-line documentation which looks.like a dollar sign is really an allmode unless you are specifically told it's a dollar sign. The dollar sign character is not parlicularly important in EMACS and we will rarely have reason to mention it.

Basic Editing Commands

13

Chapter Three Basic Editing Commands

We now give the basics of how to enter text, make corrections, and save the text in a tile. If this material is new to you, you might learn it more easily by running the TEACH-EMACS program.
3.1. Inserting Text
To insert printing characters into the text you are editing, just type them. Normally (when EMACS is at top level), they are inserted into the t,.'xt at dhe cursor (that is, at point), which moves forward. Any characters alter the cu sor move forward too. If the cursor is in between a FOO and a BAR, typing XX produces and displays FOOXXBAR with the cursor before the "B". This method of insertion works for printing characters and space, but other characters act as editing commands and do not insert themselves. Iftyou need to insert a control character, Altmode, Tab or Rubout, you must quote it by typing the C-0 command first. "C" refers to the Control bit. See section 2 [Characters], page 9.
To correct text you have just inserted, you can use Rubout. Rubout deletes the character before the cursor (not the one that the cursor is on top of or under; that is the character after the cursor). The cursor and all characters after it move backwards. You can rub out a line boundary by typing Rubout when the cursor is at the beginning of a line.
To end a line and start typing a new one, type Return (Customizers, note: this runs the function -R CRLF). You can also type Return tc break an existing line into two. A Rubout after a Return will undo it. Return really insets two characters, a carriage return and a linefeed (a CRLF), but almost everylhing in EMACS makes them look like just one character, which you can think of as a line-separator character.
If you add too many characters to one line, without breaking it with a Return, the line will grow to occupy two (or more) lines on the screen, with a "!" at the extreme right margin of all but tile last of them. The "!" says that the following screen line is not really a distinct line in the file, but just the conthuaton of a line too long to fit the screen.

14

EMACS Manual for TWENEX Users

3.2. Moving The Cursor

To do more than insert characters, you have to know how to move the cursor. Here are a few ot the commands for doing that.

C-A Moves to the beginning of the line.

C-E Moves to the end of the line.

C-F

Moves forward over one character.

C-B Moves backward over one character.

C-N Moves down one line, vertically If you start in the middle of one

line, you end in the middle of the next. From the last line of text, it

creates a new line.

C-P Move; tIp one line, vertically.

C-L

Clears the screen and reprints everything. C-U C-L reprints just

the line that the cursor is on.

C-T

Transposes two characters (the ones before and after the cursor).

M-<

Moves to the top of your text.

M->

Moves to the end of your text.

3.3. Erasing Text
Rubout Delete the character before the cursor. C-D Delete the character after the cursor. C-K Kill to the end of the line.
You already know about the Rubout command which deletes the character before the cursor. Another command, Control-D, deletes the character after the cursor, causing the rest of the text on the line to shift left. If Control-D is typed at the end of a line, that line and the next line are joined together.
To erase a larger amount of text, use the Control-K command, which kills a line at a time. If Coftrol-K is done at the beginning or middle of a line, it kills all the text up to the end of the line. If Control-K is done at the end of a line, it joins that line and the next line.
See section 9.1 [Killing], page 37, for more flexible ways of killing text.

3.4. Files
The commands above are sufficient for creating text in the EMACS buffer. The more advanced EMACS commands just make things easier. But to keep any text permanently you must put it in a tile. Files are the objects which Twenex uses for storing data for communication between different programs or to hold onto for a length of time. To tell EMACS to edit text in a file, choose a filename, such as FOO.BAR, and type C-X C-V FOO.BAR<cr>. This visits the file FOO.BAR so that its contents appear on the screen for editing. You can make changes, and then save the file by typing C-X C-S. This makes the changes permanent and actually changes the file FOO.BAR. Until then, the changes are only inside your EMACS, and the file

Basic Editing Commands

15

FOOBAR is not really changed. If the file FO0.113A- do-si't exist, and y;.u want to create it, visit it as if it did exist. When you save your text with C-X C-S the file will be created.
Of course, there is a lot more to learn about using files. See section 13 [Files], page 57.

3.5. Help
If you forget what a command does, you can find out with the Help character. The Help character is typed as Control-_ Type I hep followed by C and the command you want to know about. Help can help you in othei ways as well. See section 7 [Help], page 31.

3.6. Using Blank Lines Can Make Editing Faster

C-O C-X C-O

Insert one or more blank lines after the cursor. Delete all but one of many coivceci iive blank lines.

One thing you should know is that it is much more efficiet to insert text at the end of a line than in the middle. So if you wa it to stick a nrwv line before an existing one, it is better to make a blank line there first and then type the text into it, rather than inserting the new text at the beginning of the existing line and then insert a line separator. It is also clearer what is going on while you are in the middle.
To make a blank line, you can type Return and then C-B. But there is a single character for this: C-O (Customizers this is the built-in function ^R Open Line). So, instead of typing FOO Return to insert a line containing FO, type C-O FOO.
If you want to insert many lines, you should type many C-O's at the beginning (or you can give C-O an argument to tell it how many blank lines to make. See section 4 [Argumentsl, page 17, for how). As you then insert lines of text, you will notice that Return behaves strangely: it "uses up" the blank lines instead of pushing them down.
If you don't use up all the blank lines, you can type C-X C-0 (the function ^R Delete Blank Lines) to get rid of all but one. C-X C-O on a blank line deletes any other blank lines above and below that one, leaving only one blank line. C-X C-O on a nonblank line deletes any following blank lines, but does not affect preceding blank lines.

7-

16

EMACS Manual for TWENEX Users

!4

-i 1 _

Giving Numeric Arguments to EMACS Commands

17

Chapter Four
Giving Numeric Arguments to EMACS Commands

Any EMACS command can be given a numeric argument. Some commands interpret the argument as a repetition count. For example, giving an argument of ten to the C-F command (move forward one character) moves forward ten characters, With these commands, no argument is equivalent to an argument of one.
Some commands care only about whether there is an argunment, and not about its value for example, the command M-Q (-R Fill Paragraph) with no arguments fills text, but with an argument justifies the text as well.
Some commands use the value of the argument, but do something peculiar when there is no argument. For example, the C-K (-A Kill Line) command with an argument <n> kills <n> lines and the line separators that follow them. But C-K with no argument is special; it kills the text up to the next line separator, or, it point is right at the end of the line, it kills the line separator itself. Thus, two C-K commands with no arguments can kill a nonblank line, just like C-K with an argument of one.
The fundamental way of specifying an argument is to use the C-U (-R Universal Argument) command followed by the optional minus sign and the digits. C-U followed by a non-digit other than a minus sign has the special meaning of "multiply by four". It multiplies the argument for the next command by four. Two such C-U's multiply it by sixteen. Thus, C-U C-U C-F moves forward sixteen characters. It is a good way to move forward "fast", since it moves about 1/4 of a line on most terminals. Other useful combinations are C-U C-N, C-U C-U C-N (move down a good fraction of a screen), C-U C-U C-O (make "a lot" of blank lines), and C-U C-K (kill four lines). With commands like M-Q that care whether there is an argument but not what the value s, C-U is a good way of saying "I want an argument".
A few commands treat a plain C-U differently from an ordinary argument. A few others may treat an argument of just a minus sign differently from an argument of -1. These unusual cases will be described when they come up; they are always for reasons of convenience of use.
There are other, terminal-dependent ways of specifying arguments. They have the same effect but may be easier to type. See the appendix. If your terminal has a numeric keypad which sends something recognizably different from the ordinary digits, it is possible to program EMACS to allow use of the numeric keypad for specifying arguments. The libraries V152 and VT100 provide such a feature for those two types of terminals. See section 22.2 [Libraries], page 108.

18

EMACS Manual for FWENEX Users

4.1. Autoarg Mode
Users of ASCII keyboards may prefer to use Autoarg rnode. Auto"Irg mode means that you don't need to type C-U to specify a n1umeric argument. Instead, you type just the digits. Digits preceding an ordinary inserting character are themselves inserted, but digits preceding an Altmnode or Control character serve as an argument to it and are not inserted. Autoarg mode currently has no effect on minus signs, so negative arguments still require C-U.
To use Autoarg mode, set the variable Autoarg Mode nonzero. See section 22.3 (Variablesi, page 109.
Autoargument digits echo at the bottom of the screen; the first nondigit causes them to be inserted or uses them as an argument. To insert some digits and nolhing else, you must follow them wth a Space and then rub it out. C-G cancels the digits, while Rubout inserts them all anid then rubs out the last.

Extended (Meta-X) Commands and Functions

19

Chapter Five Extended (Meta-X) Commands and
Functions

Not all EMACS commands are of the one or two character variety you have seen so far. Many commands have long names composed of English words. This is for two reasons: the long names are easier to remember and more suggestive, and there are not enough two character combinations for evevy command to have one.
The commands with long names are known as extended commands because they extend the ;et of two-character commands.

5.1. Issuing Extended Commands

M-X
C-M-X C-X Altmode

Begin an extended command. Follow by command
name and arguments.
Begin an extended command. Follow by the command name osily; the command will ask for any arguments. Re-execute recent extended command.

Extended commands are also called M.X commands, because they all start with the character Meta-X (-R Extended Command). The M-X is followed by the command's long, suggestive name, actually the name of a function to he called. Terminate the name of the function with a Return (unless you are supplying string arguments; see below). For example, Meta-X Auto Fill Mode<cr> invokes the function Auto Fill Mode. This function when executed turns Auto Fill mode on or off.
We say that M-X Foo<cr> "calls the function FOO". When documenting the individual extended commands, we will call them functions to avoid confusion between them and the one or two character commands. We will also use "M-X" as a title like "Mr." for functions, as in "use M-X Foo". The "extended command" is what you type, starting with M-X, and what the command does is call a function. The name that goes in the command is the name of the command and is also the name of the function, and both terms will be used.
There are a great many functions in EMACS for you to call. They will be described elsewhere in the manual, according to what they do. Here we are concerned only with extended commands in general.

____

__________

20

EMACS Manual for TWENEX Users

5.1.1. Typing The Command Name
When you type M-X, the cursor moves down to the echo area at the bottom cf the screen. "M-X" is printed there, and when you type the command name it echoes there. This is known as reading a line in the echo area. You can use Rubout to cancel one character of the command name, or C-U or C-D to cancel the entire command name. A C-G cancels the whole M-X, and so does a Rubout when tile command name is empty. These editing characters apply any time EMACS reads a line in the echo area, not just within M-X.
The string "M-X" which appears in the echo area is called a prompt. The prompt always tells you what sort of argument is required and what it is going to be used for; "M-X" means that you are inside of the M-X command and should type the name of a function to be called. You ca.. replace the piompt "M-X" with some other string by defining the variable Read Command Prompt.
5.1.2. Completion
You can abbreviate the name of the command, typing only the beginning of the name, as much as is needed to identify the command unambiguously. You can also use completion on the function name. This means that you type part of the command name, and EMACS visibly fills in the rest, or as much as can be determined from the
, t you have typed.
You request completion by typing an Allmode (*'). For example, if you type M-X Au,, the "Au" expands to "Auto " because all command names which start with "Au" continue with "to ". If you ask for completion when there are several alternatives for the next character, the bell rings and nothing else happens. Altmode is also the way to terminate the command name and begin the string arguments, but it only does this if the command name completes in full. In that case, an Altmode appears after the command name in the echo area. (If the command name does not complete in full, it is ambiguous, so it would be useless to type the arguments yet).
Space is another way to request completion, but it completes only one word. Successive Spaces complete one word each, untij eilher there are multiple possibilities or the end of the name is reached. If the first word of a command is Edit, List, Kill, View or What, it is sufficient to type just the first letter and complete it with a Space. (This does riot follow from the usual definition of completion, since the single letter is ambiguous; it is a special feature added because these words are so common).
Typing "?" in the middle of the command name prints a list of all the command names which begin with what you have typed so far. You can then go on typing the name.

Extended (Meta-X) Commands and Functions

21

5.1.3. Numeric Arguments and String Arguments

Some functions can use numeric prefix arguments. Simply give the Meta-X command an argument and Meta-X will pass it along to the function which it calls. The argument appears before the "M-X" in the prompt, as in "69 M-X", to remind you
that the function you call will receive a numeric argument.

Some functions require string arguments (sometimes called sulix arguments). For those functions, the function name is terminated with a single Altmode, after which
come the arguments, separated by Altmodes. After the last argument, type a Return to cause the function to be executed. For example, tile function Describe prints the full documentation of a function (or a variable) whose name must be given as a string argument. An example of using it is

Meta-X Describe#Apropos<cr> which prints the full description of tile function named Apropos.

An alternate way of calling exlended commands is with the command C-M-X

(^R Instant Extended Command). It differs from plain M-X in that the function itself

reads any string arguments. This can be useful if the string argument is a filename or

a command name, because the function knows that and gives the argument special

treatment such as completion. However, there are compensating disadvantages. For

4

one thing, since the function has already been invoked, you can't rub out from the

arguments into the function name. For another, it is not possible to save the whole

thing, function name and arguments, for you to recall with C-X Altmode (see below).

So C-M-X saves nothing for C-X Altmode. The prompt for C-M-X is "C-M-X". You

can override it with the variable Instant Command Prompt.

5.1.4. Repeating an Extended Command
The last few extended commands you have executed are saved and you'can repeat them. We say that the extended command is saved, rather than that the function is saved, because the whole command, including arguments, is saved.
To re-execute a saved command, use the command C-X Altmode (-R Re-execute Minibuffer). It retypes the last extended command and asks for confirmation. With an argument, it repeats an earlier extended command; 2 means repeat the next to the last command, etc. You can also use the minibuffer to edit a previous extended command and re-execute it with changes (See section 23 [Minibufferl, page 123.).
Note: Extended commands and functions were once called "MM commands", but this term is obsolete. If you see it in any user documentation, please report it. Ordinary one or two character commands used to be known as "^R" commands, and the term may still be used in the on-line documentation of some functions; please report this also.

22

EMACS Manual for TWENEX Users

5.2. Arcane Information about M-X Commands
You can skip this section ifyou are not interested in customization, unless you want to know what is goitig on behind the scenes.
5.2.1. MM
Extended commands were once called "MM" commands, because "MM" is a TECO expression which looks up a command name to find the associated program, and runs that program. Thus, the TECO expression
MM Apropos#Word# means to run the Apropos command with the argument "word". You could type this expression into a minibuffer and get the same results as you would get from Meta-X AproposOWord<cr>. In fact, for the first year or so, EMACS had no Meta-X command, and that's what people did. See section 23 [Minibuffer], page 123, for information on the minibuffer.
"MM" actually tells TECO to call the subroutine in q-register "M". The first "M" means "call", and the second "M" says what to call. This subroutine takes a string arg.Lument which is the name of a function and looks it up. Calling a function is built into TECO, but looking Lip the name is not; it is implemented by the program in q-register M. That's why "MM" is called that and not "Run" or "FtQ".
5.2.2. Arguments in TECO Code
Functions can use one or two prefix arguments or numeric arguments. These are numbers (actually, TECO expressions) which go before the "MM". Meta-X can only give the MM command one argument. If you want to give it two, you must type it in using the minibuffer. When TECO code passes prefix arguments, they don't have to be numbers; they can also be strings, TECO buffer objects, etc. However, no more about that here.
When TECO code passes a string argument, it appears, terminated by an Altmode, after the Altmode which ends the function name. There can be any number of string arguments. In fact, the function can decide at run time how many string arguments to read. This makes it impossible to compile TECO codet
5.2.3. Commands and Functions
Actually, every command in EMACS simply runs a function. For example, when you type the command C-N, it runs the function " R Down Real Line". You could just as well do C-U 1 M-X -R Down Real Line<or) and get the same effect. C-N can be thought of as a sort of abbreviation. We say that the command C-N has been connected to the function ^R Down Real Line. The name is looked up once when the command and function are connected, so that it does not have to be looked up again each time the command is used. For historical reasons, the default argument passed to a function which is connected to a command you typed is 1, but the default for MM

Extended (Meta-X) Commands and Func.lions

23

and for M-X is 0. This is why the C-IJ 1 was necfessary iII thfe example 'tbove. The documentation for individual EMACS commands e;rAKlly (JIves 1hC name ol the function which really implements the comnmand a paienti e.- s alter the command itself.
Just as any function can be called directl, wi:l M-1, io almost any function can be connected to a command. You can use the tuti)ion Su Key t 1,1o this. Skt Key takes the name of the function as a string argumer. then reads ihle. (.1haacter command (including metizers or other prefix characters) duectly trom tlh tetiinal. ro define C-N, you could type
M-X Set Key#'R Down Real Line<cr>
and then type C-N. If you use the functiol View Fiie oft,-,n you could connect it to the command C-X V (not normally defined). You Cixhi fvnIl (:olnc(t II to tht- command C-M-V, replacing that command's noinal ilfinilori .et 1<cy i-, (lod for redefining commands in the middle of editing. An il ile or EV/i Â§;. ,fctanl (to it each time you run EMACS. See section 22.6 [Init], page 114.
5.2.4. Subroutines
Elk.1ACS is composed of a large number of tunctioj1is each with a name. Some of thes;e functions are connected to commands; some are there fa you to call with M-X; some are called by other functions. The last itioup uste cakl!ed subroutines. They usually have names starting with '', as in "& -Re;d I r ,e" the subroutine which reads a line in the echo area. Althouglhimost stubroutines have such names, any lunction can be called as a subroutine. Functions like Ftl D-own Retal line have names starting with -R because you are not expected to call them directly, either. The purpose of the "&"or "-R" is to get those function nanies oul of the way of command comnletion in M-X. M-X allows the command name to be abbreviated if the abbieviation is unique, and the commands that you ,ie nol interested in might have names that would interfere and make some useful ahbreviation cease to be unique. The funny characters at the front of the name prevent thi3 from happening.
5.2.5. Built-in Functions
Not all of the functions in EMACS are written in IECO. A few of the most frequently used single-character commands have definiliois ,vtteri In machine language. These include self-inserting characters, RUbOLIt. CU I. and others. Such functions defined in machine language as part of TECO are callud built ,n hnctions. Whereas the aclual definition of an ordinary function is a siring, the definition of a built-in function is iust a number, the address of a routine in TiCO.
Built-in functions can be confusing because Ihe Help l',aties know their names, hut M-X normally does not. Their EMACS "defi tiun," arc, neded only for the sake of documentation and not for actually executing the imictions, .o they are put in a special library called BARE which is loaded only while tlt Help features are working.
For example, ^R Forward Character is the name of the function which implements the C-F command. If you try to invoke ^R Forward Chaiacter with M-X. since BARE is not loaded, the name is not defined. Set Key and EVARS files have the same

24

EMACS Manual for TWENEX Users

difficulties. You can make the names permanently availab'3 for all these purposes by hoIadmq IIARE with M X Load I ituary Q, ARLt<ciO. (You could kill the BARE library
te, tI';.iItI)sitice Ihwt hdofiitions wurk flrioence installe(l ev(i if BARE is not 1o,,1,-.l Ilowever, In VAIUS files, it is better to use the FS -n INITF command to obtain hw; denimboii of a built-in function.

.' .

.. . .

-

..- . ,-... .. . . . . . ....

.

Moving Up And Down Levels

25

Chapter Six Moving Up And Down Levels

Subsystems and recursive editing levels are two states in which you are temporarily
doing something other than editing the visited tile as 1,.SULal I or example, you might
be editing a message that you wish to send, or looting ; (ocumentation file with INFO Running another fork under EMACS can als.,o e i)hought of as a sort of "sublevel".

6.1. Subsystems

A sUbsystein is an EMACS function which is an initei active ;ogram in its own fight: it reads commands in a language of its own, aid ti.pitys the results. You enter a subsystem by typing an EMACS command which iivokes it. Once entered, the subsystem runs until a specific command to exit the .nh sy.3tem is typed. An example of an EMACS subsystem is INFO, the documentation ieading program. Others are Backtrace and TDEBUG, used for debugging TECO programs, and BABYL, used for reading and editing mail files.
The commands understood by a subsystem are usually riot like EMACS commands, because their purpose is something other than editing text. For example, INFO commands are designed for moving around in a tree-structured documentation file. In EMACS, most commands are Control or Meta characters because printing characters insert themselves. In most subsystems, (here is no insertion of text, so non-Control non-Meta characters can be the commands.

While you are inside a subsystem, the mode line nsWally gives the name of the subsystem (as well as other information supplied by the .Subsystem, such as the filename and node name in INFO). You can tell that you are inside a subsystem because the mode line does not start with "EMACS", or with an open bracket ("[") which would indicate a recursive editing level. See seclion 1.1 IMode Line], page 6.
Because each subsystem implements its own commands, we cannot guarantee anything about them. However, there are conventions for what certain commands ought to do:

C-I Backspace Space 0 X

aborts (exits without finishing up). Scrolls backward, like M-V in EMACS. Scrolls forwaid, like C-V in EMACS. Exiis normally. Begins an extended com iand. like M-X in EMACS.
--

26

FMACS Manual for TWENEX Users

Ielp or ?

Prints documentation onl the subsystem's commands.

Not all of these necessarily exist in every subsystem, however

6.2. Recursive Editing Levels
A recursive editing level is a state in which you are inside a command whichi has given you some text for you to edit. The text may or may not be part of the file you are editing. Recursive editing levels are indicated in the mode line by square brackets ("I" and "I").
For example, the command M-X Edit Options is for changing the seltings of EMACS options by editing a list of option names and values. You use the same editing commands as always for making changes in this list; when you are finished, the changes take effect in your option settings. While you are editing the list of options, the mode line says "[Edit Options]". See section 22.3 [Variables], P,ge 109.
A recursive editing level differs from a subsystem in that the commands are ordinary EMACS commands (though a handful may have been changed slightly), whereas a subsystem defines its own command language.
The text you edit inside a recursive editing level depends on the command which invoked the recursive editing level. It could be a list of options and values, or a list of tab stop settings, syntax table settings, a message to be sent, or any text that you might wish to compose.
Sometimes in a recursive editing level you edit text of the file you are visiting, just as at top level. Why would this be? Usually because a few commands are temporarily changed. For example, Edit Picture in the PIC-TRE library defines commands good for editing a picture made out of characters, then enters a recursive editing level. When you exit, the special picture-editing commands go away. Until then, the brackets in the mode line serve to remind you that. although the text you are editing is your file, all is not normal. See section 26 [PICTURE], page 143.
In any case, it the mode line says "[...I" you are inside a recursive editing level, and the way to exit (send the message, redefine the options, get rid of the picture-editing commands, etc.) is with the command C-M-Z (-n Exit). See seclion 6.3 [Exiting], page 27. If you change your mir,d about the command (you don't want to send the message, or change your options, etc.) then you should use the command C-] (Abort Recursive Edit) to get out. See section 24.1 [Aborting], page 125.
Inside recursive editing levels, the help option Help R is defined to print the full documentation of the command which invoked the recursive editing level. Tile other normal Help options are still available for asking about commands you want to use while inside the recursive edit.
When the text in the mode line is surrounded by parentheses, it means that you are inside a Minmbuffer. A minibuffer is a special case of Ihe recursive editing level. Like any other, it can be aborted safely with C-1. See section 23 [Minibufferl, page 123.

Moving Up And Down Levels

27

6.3. Exiting Levels; Exiting EMACc

C-X C-Z
C-M-Z M-X Compile

Exit from EMACS to the superior fork. Exit from EMACS or horn a recursive edifing level. Exit from EMACS to _XEC and repeat the last Compile- class command.

The general EMACS command to exit is C-M-Z (-R Exit). lhi; .ommand is used to exit from a recursive editing level back to the top level of [ MAC-S, and to exit from EMACS at top level back to EXEC. If your keyboard d(,es not have a Meta key, you must type this command by means of a bit prefix character, as C-Z C-Z or as Altinode C-Z. Note carefully the difference belween exiting a1recursive editing level and aborting it: exiting allows the command which invoked the recursive editing level to linish its job with the text as you have edited it, whereas ithorlirig cancels whatever the command was going to do. See section 21.1 Aborling], page 125.
We cannot say in general how to exit a subsystei, since each subsystem defines its own command language, but the convention is to use,- thk. character "Q".
You can exit from EMACS back to the superior fork. usually EXEC, at any time, even witthin a recursive editing level, with the command C-X C-Z (-R flieturn to Superior). If this is used while you are inside a recursiv,, editinij level, then when [MACS is re-entered you will still be inside the recursive editing! level.
If the superior fork really is EXEC, you can use fvt- X Compile to return to EX, C and repeat the last Compile, Load, or Debug EXEC coimand. It offers to save any buffers which need saving, first.
Exiting EMACS does not normally save the visited file, because it is not the case that users exit EMACS only when they are "finished editing" If you want the file saved, you must use C-X C-S. Exiting does cause an auto save if Auto Save mode is in use. M-X Compile does offer to save because with it you indicate specifically your desire to use the saved file.
Exiting from EMACS runs the function & Exit EMACS, which executes the value of the variable Exit Hook, if it is defined.

6.4. Running Subforks under EMACS
Running a sublork under EMACS is a little bit like running an EMACS subsystem in that you give EMACS a command to start it, and give it a command when you want to exit.
The difference is that a subsystem is implemented as a part of EMACS. It can call
program, and any program which you could run under EXEC can also be run under EMACS. However, subforks cannot be integrated as well with the rest of EMACS.
Control of subforks is done with the TECO command FZ, which can be used for loading an arbitrary program into a subfork of EMACS.

*1J

28

EMACS Manual for TWENEX Users

6.4.1. Inferior EXEC
An alternative to exiting EMACS is pushing to another EXEC under EMACS. You can probably do in this EXEC whatever you would have done after exiting, and it will not harm the EMACS. Do M-X Push to EXEC to get an inferior EXEC, and use the POP command to return to EMACS. Repeated use of Push to EXEC gets the same EXEC with its subfork unchanged. You can actually switch randomly between EMACS and one other program in this way, even if the EXEC on your machine does not support multiple forks. The variable Exec Name contains the name of the file to run, or 0 for the ordinary EXEC.

6.4.2. Reading Mail
An important use of subforks is for reading mail with MM. See section 6.5 [Mail], page 30.

6.4.3. Subforks in General

M- fM-,

Start or resume a subfork. Kill a subfork.

The EFORK library, which you must load explicitly with Load Library (See section 22.2 (Librariesi, page 108.), contains gerieral functions for running several forks underneath EMACS. EMACS users do not need to wait for DEC to wake up and release the multi-forking EXEC; they can use multiple forks right now.
Whun EFORK is loaded, the command M- + (^R Invoke Interior) creates or resumes a subfork.

Creation of a subfork requires two arguments, which you must type. The first one is the fork handle, an arbitrary name by which you will refer to the fork later. The second one is the name of the file to run in the fork. Both arguments must be terminated with <cr>.
If the subfork terminates, you return to EMACS. You can return to EMACS anyway by typing C-G (the EMACS interrupt character).
To resume a subfork, use M-+ again, and specify the same handle. No distinction is
made between upper case and lower case in the handle name. If you type just <cr) for the handle name, the most recently used subfork is resumed.
You can also create or resume an inferior EXEC with M-+. Specify EXEC as the handle to create a new EXEC. Specify * as the handle to resume an existing EXEC. Creating a new EXEC gets rid of any existing one.

M-X List Handles prints a list of the handles of all the existing subforks.
To kill a subfork, use M-Comma (-R Kill Inferior), which asks you to specify the handle of the fork to be killed. You cannot kill the inferior EXEC, if there is one, but asking to create a new one the next time you use it has much the same effect.

Moving Up And Down Levels

29

6.4.4. Ephemerons
The functions Execute Ephemeron and Display Ephemeron, in EFORK, rui a program in an inferior fork and kill it as soon as it retur,,s (whether because it i. finished, or because you type C-G). i)splay Epheineron pauses until yon ,ype a character before redisplaying the screen; it is for use if the program prints soniething you would like to read.

6.4.5. Services Obtained from an Inferior EXEC

The SYSTEM library, which you must load explicitly with Load Library (See section 22.2 (Libraries], page 108.), contains functions which communicate with Twenex by passing commands to an inferior EXEC which exists momentarily.
Most of the commands in SYSTEM print sr)me sort of system status information. For example, there are

M-X -R System Load Average Prints the one minute load average in the echo area. This function

is expected to be used by connecting it to a command character, but the SYSTEM library does not connect it. You must connect it
yourself with Set Key or in an init or EVARS file. It can, however, be called with M-X like any other function.

M-X Check Output Queue
Prints the contents of the output queues. This requires an argument, which should be ALL, FAST or USER.

M-X Check Batch Queue Prints the contents of the batch queues. This requires an argument, which should be ALL, FAST or USER.

M-X Check Users Prints a list of the users on the system.

M-X SYSTAT

Invokes SYSTAT. You may specify the argument to be passed to SYSTAT as an argument to this command. No argument, when using M-X, is equivalent to a null argument, which obtains the default SYSTAT printout.

M-X Check Job Prints your job status, using the I JOB command.

M-X Check Disk Performs I DISK on a directory which you must specify with an argument.

M-X Check Available Prints a list of available devices or terminal lines. You must specify LINES as an argument if you want that; otherwise, the default is to
list the available devices.

Two other commands are

M-X Connect to Directory Changes your connected directory. Supply the directory name (including the brackets) as an argument, and the password as a second argument if it is needed. This command is always available; you need not load SYSTEM.
M-X Access to Directory

Am -.

"

30

EMACS Manual for TWENEX Users

Performs an ACCESS command. Supply arguments as you would for Connect to Directory.

6.5. Reading Mail
To edit your mail file, use C-X R (Read Mail). This invokes a mail reading subsystem or sublork. If the variable Mail Reader Library is defined, it is the name of the subsystem to use: else if Mail Reader Program is defined, it is the name of the program to run in asubfork; otherwise, the program MM is used.
You can send mail from within MM as well as edit your mail. But if you want to send just one message, the easiest way is Control-X M (Send Mail). C-X M works by invoking MM, or whatever program or library you use to read mail, at a special entry point.
The command M-X Check Mail tells you whether you have any new mail to be read. The MAICHK library, if loaded, checks automatically every so often.

LI

Self-Documentation Commands

31

Chapter Seven Self-Documentation Commands

EMACS provides extensive self-documentation features which revolve around a single character. called the Help character. At any time while using EMACS. you can type the Help character to ask for help. The Help character is actually typed ;,s (.-_ Control-Underscore). On some terminals just figuring out how to type a Control-Underscore is hard! Typing Underscore and adding the Control keo is what is supposed to work, but on some terminals it does not. Somietines Control-Shift-C works. On VT-100 terminals, Control-/ and Conlol-'? send a Control-_ character.
If you type Help while you are using a subsystem such as I,1FO, it prints a list of the commands of that subsystem.
ifyou type Help in the middle of a multi-character command. it often tells you about what sort of thing you should type next. For example, 0 you type M-X and then Help, it will tell you about M-X and how to type the nane of [he command. If you finish the function name and the Altmode and then type Help, it will tell you about the function you have specified so you can know what arguments it needs If you type C-X and then type Help, it will tell you about the C-X commands.
But normally, when it's time for you to start typing a new command, Help offers you several options for asking about what commands there are and what they do. It prompts with "Doc (? for help):" at the bottom of the screen, and you should type a character to say what kind of help you want. You could type Help or "?" at this point to find out what options are available. The ones you are most likely to need are described here.
The most basic Help options are Help C and Help D. You can use them to ask what a particular command does. Help C is for character commands: type the command you want to know about after the Help and the "C" ("C" stands for Character). Thus, Help C M-F or Help C Altmode F tells you about the M-F command. Help D is for asking about functions (extended commands); type the name of the function and a Return. Thus, Help D Lisp Mode<cr> tells you about M-X Lisp Mode. ielp D can also tell you the documentation of a variable, if you give it a variable's name instead of a function's name. "D" stands for "Describe", since Help D actually uses tire function Describe to do the work.
A more complicated sort of question to ask is, "what are the commands for working with files?" For this, you can type I lelp A,followed by the string "file" and a Return. It prints a list of all the functions that have "file" anywhere in their names, including Save All Files. 'R Save File, Append to File, etc. If some of the functions are connected to commands, it will tell you. For example, it wo,Id say that you can invoke
L

32

EMACS Manual tor TWENEX Users

-R Save File by typing C-X C-S. "A" stands to "Apropos", since Help A actually uses the function Apropos to do the substring matching. Help A does not list internal functions, only those the nonprogrammer is likely to use. II you want subroutines to be listed as well, you must call Apropos yourself.
Because Apropos looks only for functions whose names contain the string which you speci.y, you must use ingenuity in choosing substrings. If you are looking for commands for killing backwards and Hell) A Kill Backwards d(oesn't reveal any, don't give up. Try just Kill, or lust Backwards, or just Back. Be persistent. Pretend you are playing Adveiture.
If you are inside a recursive editing level. Help R prints out the complete documentation of that recursive editing level. See section 6.2 [Recursive], page 26. Help ? also tells you briefly what sort of recursive editing level you are in, in addition to describing the available Help options. If you are not inside a recursive editing level, Help R says that you are at top level.
If you aren't sure what characters you accidentally typed to produce surprising results, you can use Help L to find out ("L" stands for "What Lossage"). If you see commands that you don't know, you can use Help C to find eut what they did.
If a command doesn't do what you thought you knew it should do, you can ask to see whether it has changed recently. Help N prints out the file called EMACS:EMACS.NEWS which is an archive of announcements of changes to EMACS.
To find out about the other Help options, type Help Help. That is, when the first Help asks ior an option, type Help to ask what is available.
Finally, you should know about the documentation files for EMACS, which are EMACS.GLJIDE and EMACS.CHART. EMACS.GUIDE is a version :f the manual formatted to be printed out on a terminal or line printer. EMACS.CHART has a brief description of all the commands, known as the wall chart, because it is good to post on the wall near your terminal. A copy of the wall chart is included in this manual just before the index.

tJ _

The Mark and the Region

33

Chapter Eight The Mark and the Region

..... .

In general, a command which processes an arbitrary pan of the buffer must know where to start and where to stop. In EMACS, such commands start at point and enf at
a place called the mark. This range of text is called the region. Here are sCme commands for setting the mark:

C-@
C-Space C-X C-X M-@ C-M-@
C-<
C-> M-H
C-M-H C-X H C-X C-P

Set the mark where point is.
The same. Interchange mark and point. Set mark after end of next word. Set mark after end of next Lisp s-expression. Set mark at beginning of buffer.
Set mark at end of buffer. Put region around current paragraph.
Put region around current Lisp defun. Put region around entire buffer. Put region around current page.

For example, if you wish to convert part of the buffer to all upper-case, you can use the C-X C-U command, which operates on the text in the region. You can first go to the beginning of the text to be capitalized, put the mark there, move to the end, and then type C-X C-U. Or, you can set the mark at the end of the text, move to the beginning, and then type C-X C-U. C-X C-U runs the function -R Uppercase Region, whose name signifies that the region, or everything between point and the mark, is to be capitalized.
The most common way to set the mark is with the C-@ command or the C-Space command (-R Set/Pop Mark). They set the mark where point is. Then you can move point away, leaving the mark behind.
It isn't actually possible to type C-Space on non-Meta keyboards. Yet on many terminals the command appears to work anyway! This is because trying to type a Control-Space on those terminals actually sends the character C-@, which means the same thing as C-Space. A few keyboards just send a Space. If you have one of them, you type C-@, or customize your EMACS.
Since terminals have only one cursor, there is no way for EMACS to show you where the mark is located. You have to remember. The usual solution to this problem is to set the mark and then use it soon. before you forget where it is. But you can see where the mark is with the command C-X C-X (-R Exchange Point and Mark) which puts the mark where point was and point where tihe mark was. Thus, the previous

- ~- -..

34

EMACS Manual for TWENEX Users

location oi the mark is shown, but the region specified is not changed. C-X C-X is also useful when you are satisfied with the location of point but want to move the other end of the region; do C-X C-X to put point at that end and then you can adjust it. The end of the region which is at point can be moved, while the end which is at the mark stays fixed.
If you insert or delete before the mark, the mark does not stay with the characters it was between. If the buffer contains "FOO BAR" and the mark is before the "B", then if you delete the "F" the mark will be before the "A". This is an unfortunate result of the simple way the mark is implemented. It is best not to delete or insert at places above the mark until you are finished using it and don't care where it drifts to.
8.1. Commands to Mark Textual Objects
There are commands for placing the mark on the other side of a certain object such as a word or a list, without having to move there first. M-@ (^R Mark Word) puts the mark at the end of the next word, whife C-M-@ (-R Mark Sexp) puts it at the end of the next s-expression. C-> (-R Mark End) puts the mark at the end of the buffer, while C-< (^R Mark Beginning) puts it at the beginning. These characters allow you to save a little typing, sometimes.
Other commands set both point and mark, to delimit an object in the buffer. M-H (-R Mark Paragraph) puts point at the beginning of the paragraph it was inside of (or before), and puts the mark at the end. M-H does all that's necessary if you wish to indent, case-convert, or kill a whole paragraph. C-M-H (PR Mark Defun) similarly puts point before and the mark after the current or next defun. C-X C-P (^R Mark Page) puts point before the current page (or the next or previous, according to the argument), and mark at the end. The mark goes after the terminating page delimiter (to include it), while point goes after the preceding page delimiter (to exclude it). Finally, C-X H (-R Mark Whole Buffer) makes the region the entire buffer by putting point at the beginning and the mark at the end.

8.2. The Ring of Marks
Aside from delimiting the region, the mark is also useful for remembering a spot that you may want to go back to. To make this feature more useful, EMACS remembers 16 previous locations of the mark. Most commands that set the mark push the old mark onto this stack. To return to a marked location, use C-U C-@ (or C-U C-Space). This moves point to where the mark was, and restores the mark from the stack of former marks. So repeated use of this command moves point to all of the old marks on the stack, one by one. Since the stack is actually a ring, enough uses of C-U C-@ bring point back to where it was originally. Insertion and deletion can cause the saved marks to drift, but they are still good for this purpose because they are approximately right.
Some commands whose primary purpose is to move point a great distance take advantage of the stack of marks to give you a way to undo the command. The best

_A_

The Mark and the Region

35

example is M-<, which moves to the beginning of the buffer. It sets the mark first, so that you can use C-U C-@ or C-X C-X to go back to where you were. Searches sometimes set the mark; it depends on how far they move. Because of this uncertainty, searches type out "-@" if they set the mark. The normal situation is that searches leave the mark behind if they move at least 500 characters, but you can
change that value since it is kept in the variaole Auto Push Point Option. By setting it to 0, you can make all searches set the mark. By setting it to a very large number such as ten million, you can prevent all searches from setting the mark. The string to be typed out when this option does its thing is kept in the variable Auto Push Point Notification.

36

EMACS Manual for TWENEX Users

Killing and Moving Text

37

Chapter Nine Killing and Moving Text

Tile commonest way of moving or copying text with EMACS is to kill it, and get it
back again in one or more places. This is very safe because the last several pieces of killed text are all remembered, and it is versatile, because the many commands for killing syntactic units can also be used for moving those units. There are also other ways of moving text for special purposes.

9.1. Deletion and Killing

Most commands which erase text from the buffer save it so that you can get it back
if you change your mind, or move or copy it to other parts of the buffer. These commands are known as kill commands. The rest of the commands that erase text do not save it; they are known as delete commands. The delete commands include C-D
and Rubout, which act on single characters, and those commands that delete only
spaces or line separators. Commands that can destroy significant amounts of nontrivial data generally kill. The commands' names and individual descriptions use the words "kill" and "delete" to say which they do. If you do a kill command by mistake, you can use the Undo command to undo it (See section 24.3 [Undo], page 128.).

C-D Rubout M-\ C-X C-0 M- -
C-K C-W M-D M-Rubout C-X Rubout M-K C-M-K C-M-Rubout

Delete next character. Delete previous character. Delete spaces and tabs around point. Delete blank lines around the current line. Join two lines by deleting the CRLF and any indentation.
Kill rest of line or one or more lines. Kill region (from point t1 tle mark). Kill a word. Kill a word backwards. Kill back to beginning of sentence. Kill to end of sentence. Kill s-expression. Kill s-expression backwards.

38

EMACS Manual for TWENEX Users

9.1.1. Deletion
The most basic delete commands are C-D and Rubout. C-D deletes the character after the cursor, the one the cursor is "on top of" or "underneath". The cursor doesn't move. Rubout deletes the character before the cursor, and moves the cursor back. Line separators act like single characters when deleted. Actually, C-D and Rubout aren't always delete commands; if you give an argument, they kill instead. This prevents you from losing a great deal of text by typing a large argument to a C-D or Rubout.
The other delete commands are those which delete only formatting characters: spaces, tabs and line separators. M-\ (-R Delete Horizontal Space) deletes all the spaces and tab characters before and after point. C-X C-0 (-R Delete Blank Lines) deletes all blank lines after the current line, and if the current line is blank deletes all blank lines preceding the current line as well (leaving one blank line, the current line). M-- (-R Delete Indentation) joins the current line and the previous line, or the current line and the next line if given an argument. See section 11.3 [Indentation], page 48.
A function -R Delete Region used to exist, but it was too dangerous. When you want to delete a large amount of text without saving a copy of it (perhaps because it is very big), you can set point and mark around the text and then type
M-Altmode MRK## (This is a use of the minibuffer. See section 23 (Minibufferl, page 123.).
9.1.2. Killing by Lines
The simplest kill command is the C-K command (-R Kill Line). If given at the beginning of a line, it kills all the text on the line, leaving it blank. If given on a blank line, the blank line disappears. As a consequence, if you go to the front of a non-blank line and type two C-K's, the line disappears completely.
More generally, C-K kills from point up to the end of the line, unless it is at the end of a line. Inthat case it kills the line separator following the line, thus merging the next line into the current one. Invisible spaces and tabs at the end of the line are ignored when deciding which case applies, so if point appears to be at the end of the line, you can be sure the line separator will be killed.
If C-K is given a positive argument, it kills that many lines, and the ceparators that follow them (however, text on the current line before point is spared). With a negative argument, it kills back to a number of line beginnings. An argument of -2 means kill back to the second line beginning. If point is at the beginning of a line, that doesn't count.
C-K with an argument of zero kills all the text before point on the current line.

a.l

- -!--

- - -- . - - - - - . -

Killing and Moving Text

39

9.1.3. Other Kill Commands
A kill command which is very general is C-W (-R Kill Region), which kills everything between point and the mark. With this command, you can kill any contiguous characters, if you first set the mark at one end ol them and go to the other end.
Other syntactic units can be killed: words, with M-Rubout and M-D (See section 11.1 [Words], page 45.): s-expressions, with C-M-Rubout and C-M-K (See section 20.5.1 IS-expressions], page 93.); sentences, with C-X Rubout and M-K (See section 11.2 [Sentences], page 47.).

9.2. Un-Killing

Un-killing is getting back text which was killed. The usual way to move or copy text is to kill it and then un-kill it one or more times.

C-Y M-Y M-W C-M-W

Yank (re-insert) last killed text. Replace re-inserted killed text with the previously killed text. Save region as last killed text without killing. Append next kill to last batch of killed text.

Killed text is pushed onto a ring buffer called the kill ring that remembers the last 8 blocks of text that were killed. (Why it is called a ring buffer will be explained below). The command C-Y (-R Un-kill) reinseits the text of the most recent kill. It leaves the cursnr at the end of the text, and puts the mark at the beginning. Thus, a single C-W ,,'does the C-Y (M-X Undo also does so). C-U C-Y leaves the cursor in front of the
text, and the mark after. This is only if the argument is specified with just a C-U, precisely. Any other sort of argument, including C-U and digits, has an effect described below.
If you wish to copy a block of text, you might want to use M-W (-R Copy Region), which copies the region into the kill ring without removing it from the buffer. This is approximately equivalent to C-W followed by C-Y, except that M-W does not mark the buffer as "changed" and does not temporarily change the screen. Note that there is only one kill ring, and switching buffers or files has no effect on it. After visiting a new file, whatever was last killed in the previous file is still on top of the kill ring.

9.2.1. Appending Kills
Normally, each kill command pushes a new block onto the kill ring, However, two or more kill commands in a row combine their text into a single entry on the ring, so that a single C-Y command gets it all back as it was before it was killed. This means that you don't have to kill all the text in one command; you can keep killing line after line, or word alter word, until you have killed it all, and you can still get it all back at once. (Thus we join television in leading peop!z to kill thoughtlessly).
Commands that kill forward from point add onto the end of the previous killed text. Commands that kill backward from point add onto the beginning. This way, any sequence of mixed forward and backward kill commands puts all the killed text into one entry without rearrangement.

40

EMACS Manual for TWENEX Users

If a kill command is separated from the last kill command by other commands, it starts a new entry on the kill ring, unless you tell it not to by saying C-M-W (AR Append Next Kill) in front of it. The C-M-W tells the following command, if it is a
kill command, to append the text it kills to the last killed text, instead of starting a new entry. With C-M-W, you can kill several separated pieces of text and accumulate them to be yanked back in one place.
9.2.2. Un-killing Earlier Kills
To recover text that was killed some time ago (that is, not the most recent victim), you need the Meta-Y (-R Un-kill Pop) command. The M-Y command should be used only after a C-Y command or another M-Y. It takes the un-killed text and replaces it with the text from an earlier kill.
You can think of all the last few kills as living in a ring. After a C-Y command, the text at the front of the ring is also present in the buffer. M-Y "rotates" the ring, bringing the previous string of text to the front, and this text replaces the other text in the buffer as well. Enough M-Y commands can rotate any part of the ring to the front, so you can (et at any killed text as long as it is recent enough to be still in the ring. Eventually the ring rotates all the way around and the most recent killed text comes to the front (and into the buffer) again. M-Y with a negative argument rotates the ring backwards. If the region doesn't match the text at the front of the ring, M-Y is not allowed.
In any case, when the text you are looking for is brought into the buffer, you can stop doing M-Y's and it will stay there. It's really just a copy of what's at the front of the ring, so editing it does not change what's in the ring. And the ring, once rotated, stays rotated, so that doing another C-Y gets another copy of what you rotated to the front with M-Y.
If you change your mind about un-killing, a C-W or M-X Undo gets rid of the tin -killed text at any point, after any number of M-Y's. C-W pushes the text onto the ring again. M-X Undo does not.
If you know how many M-Y's it would take to find the text you want, then there is an alternative. C-Y with an argument greater than one restores the text the specified number of entries down on the ring. Thus, C-U 2 C-Y gets the next to the last block of killed text. It differs from C-Y M-Y in that C-U 2 C-Y does not permanently rotate the ring.
A way of viewing the contents of the kill ring is
M-X View Q-reglster*..K<cr>
You must add one to the indices listed by this command, to get the argument to use with C-Y to yank any particular string.

Killing and Moving Text

41

9.3. Other Ways of Copying Text
Usually we copy or move text by killing it and un-killing it, but there aro other ways that are useful for copying one block ol text in many places, or for copying manly scattered blocks of text into one place.
9.3.1. Accumulating Text
You can accumulate blocks of text from scattered locations either into a buffer or into a file if you like.
To append them into a buffer, use the command C-X A <buffername><cr> (-R Append to Buffer), which inserts a copy of the region into the specified buffer at the location of point in that bufter. If there is no buffer with the name you specify, one is created, empty. It you append text into a buffer which is visiting a file, the copied text goes into the middle of the text of the file.
Point in that buffer is left at the end of the copied text, so successive uses of C-X A accumulate the text in the specified buffer in the same order as they were copied. If C-X A is given an argument, point in the other buffer is left before the copied text, so successive uses of C-X A add text in reverse order.
You can retrieve the accumulated text from that buffer with M-X Insert Buffer0<buffername><cr>. This inserts a copy of the text in that buffer into the selected buffer. You can also select the other buffer for editing. See section 14 [Buffersi, page 67, for background information on bu(ers.
Strictly speaking, C-X A does not always append to the text already in the buffer. But if it is used on a buffer which starts out empty, it does keep appending to the end.
To accumulate text into a file, use the command M-X Append to File<filename><cr>. It adds the text of the region to the end of the specified file. M-X Prepend to File adds the text to the beginning of the file instead. The file is changed immediately on disk. If you wish to insert the text into a copy of the file in an EMACS buffer, you must append to that buffer instead.
9.3.2. Copying Text Many Times
When you want to insert a copy of the same piece of text frequently, the kill ring becomes impractical, since the text moves down on the ring as you edit, and will be in an unpredictable place on the ring when you need it again. For this case, you can use the commands C-X X (-R Put Q-register) and C-X G ('R Get Q-register) to move the text.
C-X X<q> stores a copy of the text of the region in a place called q-register <q>. <q> can be a letter or a number. This gives 36 places in which you can store a piece of text. With an argument, C-X X deletes the text as well. C-X G<q> inserts in the buffer the text from q-register <q>. Normally it leaves point before the text and places the mark after, but with a numeric argument it puts point after the text and the mark before.

____

i

42

EMACS Manual for TWENEX Users

The q-registers are important temporary variables in TECO programming, but you don't have to understand them, only to know that what you save with C-X X A is what you will get with C-X G A.
Do not use q-registers M and R in this way, ifyou are going to use the TECO commands MM and MR.

Searching

43

Chapter Ten Searching

Like other editors, EMACS has commands for searching for an occurrence of a
string. The search command is unusual in that it is incremrrital;it begins to search before you have finished typing the search string. As you type in the search string, EMACS shows you where it would be found. When you have typed enough characters to identify the place you want, you can stop.

C-S
C-R C-S 0 C-W

Search forward.
Search backward. Word search, ignoring whitespace.

The command to search is C-S (-R Incremental Search). C-S reads in characters and positions the cursor at the first occurrence of the characters that you have typed. If you type C-S and then F, the cursor moves right after the first "F". Type an "0", and see the cutsor move to after the first "FO". After another "0", the cursor is after the first "FOO" after the place where you started the search. At the same time, the "FOO" has echoed at the bottom of the screen.
If you type a mistaken character, you can rub it out. After the FOO, typing a rubout makes the "0" disappear from the bottom of the screen, leaving only "FO". The cursor moves back to the "FO". Rubbing out the "0" and "F" moves the cursor back to where you started the search.
When you are satisfied with the place you have reached, you can type an Altmode, which stops searching, leaving the cursor where the search brought it. Also, any command not specially meaningful in searches stops the searching and is then executed. Thus, typing C-A would exit the search and then move to the beginning of the line. Altmode is necessary only if the next command you want to type is a printing character, Rubout, Altmode or another search command, since those are the characters that would not exit the search.
Sometimes you search for "FOO" and find it, but not the one you expected to find. There was a second FOO that you forgot about, before the one you were looking for. Then type another C-S and the cursor will find the next FO0. This can be done any number of times. If you overshoot, you can rub out the C-S's. You can also repeat the search after exiting it, if the first thing you type after entering another search (when the argument is still empty) is a C-S.
If your string is not found at all, the echo area says "Failing I-Search". Tile cursor is after the place where EMACS found as much of your string as it could. Thus, if you search for FOOT, and there is no FOOT, you might see the cursor after the FOO in

____ ...

.

_

_..... . __...........

__

'i

44

EMACS Manual for TWENEX Users

FOOL. At this point there are several things you can do. If your string was mistyped, you can rub some of it out and correct it. If you like the place you have found, you can type Altmode or some other EMACS command to "accept what the search offered". Or you can type C-G, which throws away the characters that could not be found (the "T" in "FOOT"), leaving those that were found (the "FOO" in "FOOT"). A second C-G at that point undoes the search entirely.
The C-G "quit" command does special things during searches; just what, depends on the status of the search. If the search has found what you specified and is waiting for input. C-G cancels the entire search. The cursor moves back to where you started the search. If C-G is typed while the search is actually searching for something or updating the display, or after search failed to find some of your input (having searched all the way to the end of Ihe file), then only the characters which have not been found are discarded. Having discarded them, the search is now successful and waiting for more input, so a second C-G will cancel the entire search. Make sure you wait for the first C-G to (ling the bell before typing the second one; if typed too soon, the second C-G may be confused with the first and effectively lost.
You can also type C-R at any time to start searching backwards. If a search fails because the place you started was too late in the file, you should do this. Repeated C-R's keep looking for more occurrences backwards. A C-S starts going forwards again. C-R's can be rubbed out just like anything else. Ityou know that you want to search backwards, you can use C-R instead of C-S to start the search, because C-R is also a command (-R Reverse Incremental Search) to search backward. Note to all customizers: all this command does is call the current definition of -R Incremental Search with a negative argument.
A non-incremental search isalso available. Type Altmode right after the C-S to get it.Do
M-X Describe#eR String Search<cr>
for details. Some people who prefer non-incremental searches put that function on Meta-S, and ^R Character Search (do M-X DescribeO for details) on C-S. It can do one useful thing which incremental search cannot: search for words regardless of where the line breaks.
Word search searches for a sequence of words without regard to how the words are separated. More precisely, you type a string of many words, using single spaces to separate them, and the string can be found even if there are multiple spaces or line separators between the words. Other punctuation such as commas or periods must match exactly. This is useful in conjunction with documents formatted by text justifiers. If you edit while looking at the printed, formatted version, you can't tell where the line breaks are in the source file. With word search, you can search without having to know.
Word search is a special case of non-incremental search and is invoked with C-S Altmode C-W. This is followed by the search string, which must always be terminated with an Altmode. Searching does not start until the final Altmode is typed.

-r. . . .N

.

.

.

.

.

..

Commands for English Text

45

Chapter Eleven Commands for English Text

EMACS enables you to manipulate words, sentences, or paragraphs of text. In addition. there are commands to fill text, and convert case.
Editing files of text in a human language ought to be done using Text mode rather than Fundamental mode. Invoke M-X Text Mode to enter Text mode. See section 20.1 IMajor Modes], page 87. M-X Text Mode causes Tat) to rut] the function -R Tab to Tab Stop, which allows you to set any tab stops with M-X Edit Tab Stops (See section 11.3 [Indentation], page 48.). Features concerned with comments in programs are turned off except when explicitly invoked. Automatic display of parenthesis matching is turned off, which is what most people want. Finally, the syntax table is changed so that periods are not considered part of a word, while apnstrophes, backspaces and underlines are.
Ityou are editing input for the text justifier TEX, you might want to use TEX mode instead of Text mode. See the file INFO:E-EX.INFO.
For SCRIBE input, use SCRIBE mode, which is like Text mode but recognizes SCRIBE comments and enables display of parenthesis matching. SCRIBE mode recognizes @BEGIN and @END lines as separating paragraphs but considers most other @-commands as ordinary text. If you have other lines which should separate paragraphs but do not start with @BEGIN or @END, put @; in front of them. For example,
@;@quotation{ This is some text that should be filled by itself, not together with the preceding or following text.
Someday there may be special major modes for other text justifiers.

11.1. Word Commands

EMACS has commands for moving over or operating on words. By convention, they are allMeta- characters.

M-F

Move Forward over a word.

M-B

Move Backward over a word.

M-D

Kill up to the end of a word.

46

EMACS Manual for TWENEX Users

M-Rubout M-@
M-T

Kill back to the beginning of a word. Mark the end of the next word. Transpose two words; drag a word forward or backward across other words.

Notice how these commands form a group that parallels the character based commands C-F, C-B, C-D, C-T and Rubout. M-@ is related to C-@.
The commands Meta-F ('R Forward Word) and Meta-B ('R Backward Word) move forward and backward over words. They are thus analogous to Control-F and Control-B. which move over single characters. Like their Control- analogues, Meta-F and Meta-B move several words if given an argument. Meta-F with a negative argument moves backward like Meta-B, and Meta-B with a negative argument moves forward. Foiward motion stops right after the last letter of the word, while backward motion stops right before the first letter.
It is easy to kill a word at a time. Meta-D ('R Forward Kill Word) kills the word after point. To be precise, it kills everything from point to the place Meta-F would move to. Thus, if point is in the middle of a word, only the part after point is killed. If some punctuation comes after point and before the next word, it is killed along with the word. If you wish to kill only the next word but not the punctuation, simply do Meta-F to get the end, and kill the word backwards with Meta-Rubout. Meta-D takes arguments just like Meta-F.
Meta-Rubout (^R Backward Kill Word) kills the word before point. It kills everything from point back to where Meta-B would move to. If point is after the space in "1-O,BAR", "FOO, " is killed. In such a situation, to avoid killing the comma and space, do a Mela-B and a Meta-D instead of a Meta-Rubout.
Meta-T (-R Transpose Words) moves the cursor forward over a word, dragging the word preceding or containing the cursor forward as well. A numeric argument serves as a repeat count. A negative argument undoes the effect of a positive argument; it drags the word behind the cursor backward over a word. An argument of zero, instead of doing nothing, transposes the word at point with the word at mark. In any case, the delimiter characters between the words do not move. For example, "FOO. BAR" transposes into "BAR, FOO" rather than "BAR FOO,".
To operate on the next n words with an operation which applies between point and

mark, you can either set the mark at point and then move over the words, or you can use the command Meta-@ (-R Mark Word) which does not move point, but sets the mark where Meta-F would move to. It can be given arguments just like Meta-F. The case conversion operations have alternative forms thai apply to words, since they are particularly useful that way.
Note that if you are in Atom Word mode and in Lisp mode, all the word commands regard an entire Lisp atom as a single word. See section 22.1 [Minor Modes], page 107.
The word commands' understanding of syntax is completely controlled by the syntax table. Any character can, for example, be declared to be a word delimiter. See section 22.4 (Syntax], page 111.

Commands for English Text

47

11.2. Sentence and Paragraph Commands

The EMACS commands for manipulating sentences and paragraphs are mostly Meta- commands, so as to resemble the word-handling commands.

M-A

Move back to the beginning of the sentence.

M-E

Move forward to the end of the sentence.

M-K

Kill this or next sentence.

M-[

Move back to previous paragraph beginning.

M-J

Move forward to next paragraph end.

M-H

Put point and mark around this paragraph (around the following

one, if between paragraphs).

C-X Rubout

Kill back to beginning of sentence,

11.2.1. Sentences
The commands Meta-A and Meta-E (R Backward Sentence and -R Forward Sentence) move to the beginning and end of the current sentence, respectively. They were chosen to resemble Control-A and Control-E, which moie to the beginning and end of a line. but unlike those Control characters Meta-A and Meta-E if repeated move over several sentences. EMACS considers a sentence to end wherever there is a .", ?" or "!"followed by the end of a line or two spaces, with any number of ")"'s,
"s, '"'s, or '"'' allowed in between. Neither M-A nor M-E moves past the CRLF or spaces which delimit the sentence.
Just as C-A and C-E have a kill command, C-K, to go with them, so M-A and M-E have a corresponding kill command M-K (-R Kill Sentence) which kills from point to the end of the sentence. With minus one as an argument it kills back to the beginning of the sentence. Larger arguments serve as a repeat count.
There is a special command, C-X Rubout (-R Backward Kill Sentence) for killing back to the beginning of a sentence, because this is useful when you change your mind in the middle of composing text.

11.2.2. Paragraphs
There are similar commands for moving over paragraphs. Meta-[ (-R Backward Paragraph) moves to the beginning of the current or previous paragraph, while Meta-] (-R Forward Paragraph) moves to the end of the current or next paragraph. Blank lines and text justifier command lines separate paragraphs and are not part of any paragraph. Also, an indented line starts a new paragraph.
In major modes for programs (as opposed to Text mode), paragraphs are determined only by blank lines. This makes the paragraph commands continue to be useful even though there are no paragraphs per se.
When there is a fill prefix, then paragraphs are delimited by all lines which don't start with the fill prefix. See section 11.4 IFilling], page 50.
When you wish to operate on a paragraph, you can use the command Meta-H

......

-,

. ...- -. .

..

.

-

-

. . . .- .

..

11

48

EMACS Manual for TWENEX Users

(-R Mark Paragraph) to prepare. This command puts point at the beginning and mark at the end of the paragraph point was in. Before setting the new mark at the end, a mark is set at the old location of point; this allows you to undo a mistaken Meta-H with two C-U C-@'s. If point is between paragraphs (in a run of blank lines, or at a boundary), the paragraph following point is surrounded by point and mark. Thus, for example, Meta-H C-W kills the paragraph around or after point.
One way to make an "invisible" paragraph boundary that does not show if the file is printe(d is to put space-backspace at the front of a line. The space makes the line appear (to the EMACS paragraph commands) to be indented, which usually means that it starts a paragraph.
The variable Paragraph Deliroiter should be a TECO search string (See section 19.3 [TECO search strings], page 85.) composed of various characters or character sequences separated by tO's. A line whose beginning matches the search string is either the beginning of a paragraph or a text justifier command line part of no paragraph. If the line begins with period, singlequote, "-", "\" or "@", it can be a text justifier command line; otherwise, it can be the beginning of a paragraph; but it cannot be either one unless Paragraph Delimiter is set up to recognize it. Thus, ".tO " as the Paragraph Delimiter string means that lines starting with spaces start paragraphs. lines starling with periods are text justifier commands, and all other nonblank lines are nothing special.

11.3. Indentation Commands for Text

Tab M-Tab Linefeed M- ^ M-M
M-1
C-M-\ C-X Tab

Indents "appropriately" in a mode-dependent fashion. Inserts a tab character. Is the same as Return followed by Tab. Undoes a Linefeed. Merges two lines. Moves to the line's first nonblank character. Indent to tab stop. In Text mode, Tab does this also. Indent several lines to same column. Shift block of lines rigidly right or left.

The way to request indentation is with the Tab command. Its precise effect depends on the major mode. In Text mode, it indents to the next tab stop. You can set the tab stops with Edit Tab Stops (see below). If you just want to insert a tab character in the buffer, you can use M-Tab or C-Q Tab.
For English text, usually only the first line of a paragraph should be indented. So, in Text mode, new lines created by Auto Fill mode are not indented. Text mode tells Auto Fill mode not to indent new lines by setting the variable Space Indent Flag to zero.

But sometimes you want to have an indented paragraph. In such cases, use M-X Edit Indented Text, which enters a submode in which Tab and Auto Fill indent each line under the previous line, and only blank lines delimit paragraphs. Alternatively, you can specify a fill prefix (see below).
To undo a line-break, whether done manually or by Auto Fill, use the Meta-" (^R Delete Indentation) command to delete the indentation at the front of the current

L7
__

Commands for English Text

49

line, and the line boundary as well. [hey are replaced by a 5ingle space, or by no space if before a ")" or after a "(", or at the beginning of a line. To delete just the indentation of a line, go to the beginning of the line and use Meta-\ (-R Delete Horizontal Space), which deletes all spaces and tabs around the cursor.
To insert an indented line before the current line. do C-A, C-0. and then Tat). To
make an indented line after the current line. use C-E rinefeed.
To move over the indentation on a line, do Meta-M or C-M-M (-R Back to Indentation). These commands, given anywhere on a line, position the cursor at the first nonblank character on the line.
There are also commands for changing the indentation of several lines at once. Control-Meta-\ (-R Indent Region) gives each line whose first character is between point and mark the "usual" indentation (as determined by Tab). With a numeric argument, it gives each line precisely that much indentation. C-X Tab (J? Indent Rigidly) moves all of the lines in the region right by its argument (left, for negative arguments).
Usually, EMACS uses both tabs and spaces to indent. If you don't want that, you can use M-X Indent Tabs Mode to turn the use of tabs on or off. To convert all tabs in a file to spaces, you can use M-X Untabify, whose arguIment is the number of positions to assume between tab stops (defatill is 8). Argumnts other than 8 are useful in
processing files transl)orted from systems which use other tab slops so that they look the way they are supposed to. M-X Tabify performs Ihe opposite transformation, replacing spaces with tabs whenever possible, but only if there are at least three of them so as not to obscure ends of sentences. The visual appearance of the text should never be changed by Tabify or Untabify unless you specify an argument other than 8.
11.3.1. Tab Stops
For typing in tables, you can use Text mode's definition of Tab, -R Tab to Tab Stop, which may be given anywhere in a line, and indents from there to the next tab stop. If you are not in Text mode, this function can be found on M-I anyway.
Set the tab stops using Edit Tab Stops, which displays for you a buffer whose contents define the tab stops. Here is what it would look like for ordinary tab stops every eight columns (truncated to fit the manual).

123456789 123456789 123456789 123456789 123456789 1234

0

10

20

30

40

50

The first line contains a colon or period at each tab stop. Colon indicates an
ordinary tab, which fills with whitespace; a period specifies that characters be copied from the corresponding columns of the second line below it. Thus, you can tab to a column automatically inserting dashes or periods, etc. It is your responsibility to put in the second line the text to be copied. In the example above there are no periods, and the second line is not used, and is left blank.

50

EMACS Manual for TWENEX Users

The third and fourth lines you see contain column numbers to help you edit. They are only there while you are editing the tab stops; they are not really part of the tab settings. The first two lines reside in the variable Tab Stop Definitions when they are not being edited. If the second line is not needed, Tab Stop Definitions can be just one line, with no CRLFs. This makes it easier to set the variable in a local modes list. See section 22.7 [Locals], page 118.

11 .4. Text Filling

Space
M-Q M-G M-S C-X =

in Auto Fill mode, breaks lines when appropriate.
Fill paragraph. Fill region (G is for Grind, by analogy with Lisp). Center a line. Show current cursor position.

Auto Fill mode lets you type in text that is filled (broken up into lines that fit in a specified width) as you go. If you alter existing text and thus cause it to cease to be properly filled, EMACS can fill it again if you ask.
Entenng Auto Fill mode is done with M-X Auto Fill. From then on, lines are broken automatically at spaces when they get longer than the desired width. New lines are usually indented, but in Text mode they are not. To leave Auto Fill mode, execute M-X Auto Fill again. When Auto Fill mode is in effect, the word "Fill" appears in the mode line.
When you finish a paragraph, you can type Space with an argument of zero. This doesn't insert any spaces, bul it doe3 move the last word of the paragraph to a new line if it doesn't lit in the old line. Return also moves the last word, but it may create another blank line.
If you edit the middle of a paragraph, it may no longer be correctly filled. To re-fill a paragraph, use the command Meta-Q (-R Fill Paragraph). It causes the paragraph that point is inside, or the one after point if point is between paragraphs, to be re-filled. All the line-breaks are removed, and then new ones are inserted where necessary. M-Q can be undone with M-X Undo (See section 24.3 [Undo], page 128.).
If you are not happy with Meta-Q's idea of where paragraphs start and end (the same as Meta-H's. See section 11.2 [Paragraphsi, page 47.), you can use Meta-G (-R Fill Region) which re-fills everything between point and mark. Sometimes, it is ok to fill a region of several paragraphs at once. Meta-G recognizes a blank line or an indented line as starting a paragraph and does not fill it in with the preceding line. The sequence space-backspace at the front of a line will prevent it from being filled into the preceding line but is invisible when the file is printed. However, the full sophistication of the paragraph commands in recognizing paragraph boundaries is not available. The purpose of M-G is to allow you to override EMACS's usual criteria for paragraph boundaries. M-G can be undone with M-X Undo.
Giving an argument to M-G or M-Q causes the text to be justified instead of filled. This means that extra spaces are inserted between the words so as to make the right margin come out exactly even. I do not recommend doing this. If someone else has

Commands for English Text

51

uglified some text by justifying it, you can unjustify it (remove the spaces) with M-G or M-Q without an argument.
The command Meta-S (-R Center Line) centers a line within the current line width. With an argument, it centers several lines individually and moves past them.
The maximum line width for filling is in the variable Fill Column. Both M-Q and Auto Fill make sure that no line exceeds this width. The easiest way to set the variable is to use the command C-X F (-R Set Fill Column) which places the margin at the column point is on, or wherever you specify with a numeric argument. The fill column is initially column 70.
To fill a paragraph in which each line starts with a special marker (which might be a few spaces, giving an indented paragraph), use the fill prefix feature. Move point to a spot right after the special marker and give the command C-X Period (^R Set Fill Prefix). Then, filling the paragraph will remove the marker from each line beforehand, and put the marker back in on each line afterward. Auto Fill when there is a fill prefix inserts the fill prefix at the front of each new line. Also, any line which does not start with the fill prefix is considered to start a paragraph. To turn off the fill prefix, do C-X Period with point at the front of a line. The fill prefix is kept in the variable Fill Prefix.
The command C-X = (What Cursor Position) can be used to find out the column that the cursor is in, and other miscellaneous intormation about point which is quick to compute. It prints a line in the echo area that looks like this:
X=5 Y=7 CH=101 .=3874(35% of 11014) 1l=<3051,4640>
In this line, the X value is the column the cursor is in (zero at the left), the Y value is the screen line that the cursor is in (zero at the top), the CH value is the octal value of the character after point (101 is "A"), the "point" value is the number of characters in the buffer before point, and the values in parentheses are the percentage of the buffer before point and the total size of the buffer.
The H values are the virtual buffer boundaries, indicate which part of the buffer is still visible when narrowing has been done. If you have not done narrowing, the H values are omitted. For more information about the virtual buffer boundaries, See section 17 [Narrowing), page 77.

1 1.5. Case Conversion Commands

EMACS has commands for converting either a single word or any arbitrary range of text to upper case or to lower case.

M-L M-U M-C C-X C-L C-X C-U

Convert following word to f-wer case. Convert following word to upper case. Capitalize the following word. Convert region to lower case. Convert region to upper case.

The word conversion commands are the most useful Meta-L (-R Lowercase Word) converts the wor-i after point to lower case, moving past it. Thus, successive Meta-L's convert successive words. Meta-U (-R Uppercase Word) converts to all capitals

1

52

EMACS Manual for TWENEX Users

instead, while Meta-C (^R Uppercase Initial) puts the first letter of the word into upper case and the rest into lower case. All these commands convert several words at once it given an argument. They are especially convenient for converting a large amount of text from all upper case to mixed case, because you can move through the text using M-L, M-U or M-C on each word as appropriate.
When given a negative argument, the word case conversion commands apply to the appropriate number of words before point, but do not move point. This is convenient when you have just typed a word in the wrong case. You can give the case conversion command and continue typing.
If a word case conversion command is given in the middle of a word, it applies only to the part of the word which follows the cursor, treating it as a whole word.
The other case conversion commands are C-X C-U (^R Uppercase Region) and C-X C-L (^R Lowercase Region), which convert everything between point and mark to the specified case. Point and mark do not move. These commands ask for confirmation if the region contains more than Region Query Size characters; they also save the original contents of the region so you can undo them (See section 24.3 [Undo], page 128.).
11 .6. Dissociated Press
M-X Dissociated Press is a command for scrambling a file of text either word by word or character by character. Starting from a bufferfull of straight English, it produces extremely amusing output. Dissociated Press prints its output on the terminal. It does not change the contents of the buffer.
Dissociated Press operates by jumping at random from one point in the buffer to another. In order to produce plausible output rather than gibberish, it insists on a certain amount of overlap between the end of one run of consecutive words or characters and the start of the next. That is, if it has just printed out "president" and then decides to jump to a different point in the file, it might spot the "ent" in "pentagon" and continue from there, producing "presidentagon". Long sample texts produce the best results.
A negative argument to M-X Dissociated Press tells it to operate character by character, and specifies the number of overlap characters. A positive argument tells it to operate word by word and specifies the number of overlap words. In this mode, whole words are treated as the elements to be permuted, rather than characters. No argument is equivalent to an argument of two. For your againformation, the output is only printed on the terminal. rhe file you start with is 20octhanged.
Dissociated Press produces nearly the same results as a Markhov chain based on a frequency table constructed from the sample text. It is, however, an independent, ignorigimal invention. Dissociated Press techniquitously copies several consecutive characters from the sample between random choices, whereas a Markhov chain would choose randomly for each word or character. This makes for more plausible sounding results.
It is a mustatement that too much use of Dissociated Press can be adevelopediment

Commands for English Text

53

to your real work. Sometimes to the point of outragedy. And keep dissociwords out of
your documentation, if you want it to be well userenced and properbose. Have fun. Your buggestions are welcome.

II

A

,_I_

54

EMACS Manual for TWENEX Users

Commands for Fixing Typos

55

Chapter Twelve Commands for Fixing Typos

In this section we describe the commands that are especially useful for the times when you catch a mistake in your text just after you have made it, or change your mind
while composing text on line.

Rubout
M-Rubout C-X Rubout
C-T C-X C-T C-X T M-Minus M-L M-Minus M-U M-Minus M-C
M-'

Delete last character.
Kill last word. Kill to beginning of sentence.
Transposes two characters. Transposes two lines. Transposes two arbitrary regions. Convert last word to lower case. Convert last word to all upper case. Convert last word to lower case with capital initial. Fix up onitted shift key on digit.

12.1. Killing Your Mistakes
The Rubout command is the most important correction command. When used among printing (self-inserting) characters, it can be thought of as canceling the last character typed.
When your mistake is longer than a couple of characters, it might be more convenient to use M-Rubout or C-X Rubout. M-Rubout kills back to the start of the last word, and C-X Rubout kills back to the start of the last sentence. C-X Rubout is particularly useful when you are thinking of what to write as you type it, in case you change your mind about phrasing. M-Rubout and C-X Rubout save the killed text for C-Y and M-Y to retrieve (See section 9.2 [Un-killing], page 39.).
M-Rubout is often useful even when you have typed only a few characters wrong, if you know you are confused in your typing and aren't sure exactly what you typed. At such a time, you cannot correct with RIobout except by looking at the screen to see what you did. It requires less thought to kill the whole word and start over again, especially it the system is heavily loaded.

- -- , . ... . . _. .-

.

56

EMACS Manual for TWENEX Users

12.2. Transposition
The common error of tansposing two characters can be fixed, when they are a(djacent, with the C- I command. Normally, C I ti asposes the two characters on either side of the cursor. When given at the end ot a line, tathet than transposing the last character of the line with the line separalor, which would be useless, C-T transposes the last two characters on the line. So, if you catch your transposition error right away, you can fix it with just a C--T. I you don't catch it so fast, you must move the cursor back to between the two transposed characters. If you transposed a space with the last character of the word belore it. the word motion commands are a good way of getting there. Otherwise, a reverse search (C-R) is often the best way. See section 10 [Search]. page 43.
To transpose two lines, use the C-X C-T command (-R Transpose Lines). M-T transposes words and C-M-T transposes s-expressions.
A more general transpose command is C-X T (-R Transpose Regions). This transposes two arbitrary blocks of text. which need not even be next to each other. To use it, set the mark at one end of one block, then at the other end of the block; then go to the other block and sot the mark at one end, and put point at the other. In other words, point and the last three marks should be at the four locations which are the endIs of the two block;. It does not matter which of the four locations point is at, or which order the others were marked. C-X F transposes the two blocks of text thus identified, and relocates point and the three marks without changing their order.
12.3. Case Conversion
A very common error is to type words in the wrong case. Because of this, the word case-conversion commands M-L, M-U and M-C have a special teature when used with a negative argument: they do not move the cursor. As soon as you see you have mistyped the last word, you can simply case-convert it and go on typing. See section 11 .5 [Case], page 51.
Another common error is to type a special character and miss the shift key, producing a digit instead. There is a special command for fixing this: M-' (-R Upcase Digit). which fixes the last digit before point in this way (but only if that digit appears on the current line or the previous line. Otherwise, to minimize random effects of accidental use, M- does nothing). Once again, the cursor does not move, so you can iise M-' when you notice the error and immediately continue typing. Because M-' needs to know the arrangement of your keyboard, the first time you use it you must supply the information by typing the row of digits 1, 2, ... , 9, 0 but holding down the shift key. This tells M-' the correspondence between digits and special characters, which is remembered for the duration of the EMACS. This command is called M-' because its main use is to replace "7" with a single-quote.

File Handling

57

Chapter Thirteen File Handling

The basic unit of stored data is the file. Each program, each paper, lives usually in its own file. To edit a program or paper, [he editor must be told the name of the file that contains it. This is called visiting the file. To make your changes to the file permanent on disk, you must save the file. EMACS also has lacilities for deleting files conveniently, and for listing your file directory. Special text in a file can specify the modes to be used when editing the file.

13.1. Visiting Files

C-X C-V C-X C-R C-X C-Q
C-X C-S
Meta--

Visit a file. Visit a file for reading only. Change regular visiting to read only, or vice versa. Save the visited file. Tell EMACS to forget that the buffer has been changed.

Visiting a file means copying its contents into EMACS where you can edit them. EMACS remembers the name of the file you visited. Unless you use the multiple buffer
or window features of EMACS, you can only be visiting one file at a time. The name of the file you are visiting in the currently selected buffer is visible in the mode line when you are at top level.

The changes you make with EMACS to the text of the file you are visiting are made not in the file itself, but in a copy inside EMACS. The file itself is not changed. The

changed text is not permanent until you save it in a file. The first time you change the text, a star appears at the end of the mode line; this indicates that the text contains fresh changes which will be lost unless you save them. You can do that at any time with C-X C-S. If you change one file and then try to visit another in the same buffer, EMACS offers to save the first file (if it is not saved, the changes are lost). In addition, for those who are afraid of system crashes, Auto Save mode saves the file at regular intervals automatically while you edit. See section 13.3 [Auto Save], page 59. Journal files are another way of protecting against crashes. See section 24.4 [Journals], page 129.
To visit a file, use the command C-X C-V (-R Visit File). Follow the command with the name of the file you wish to visit, terminated by a Return. If you can see a filename in the mode line, then that name is the default, and any component of the filename which you don't specify is taken from it. If EMACS thinks you can't see the defaults,

58

EMACS Manual for TWENEX Users

they are included in the prompt. You can abort the command by typing C-G, or edit tire filename with the standard 1 wenex editig and recognition commands (Rubout, C-W, C-U. C-F and Altmode). If you do type a Return to hiish the command, the new file's text appears on the screen, and its name shows up in the mode line.
When you wish to save the file and make your changes permanent, type C-X C-S (-R Save File). After the save is finished, C-X C-S prints "Written: <filenames>" in the echo area at the bottom of the screen. It there are no changes to save (no star at the end of the mode line), the file is not saved; it would be redundant to save a duplicate of the previous version.
However, you need not do the saves yourselt ifyou alter one file and then visit another, EMACS offers to save the old one. If you answer Y, the old file is saved; if you answer N. all the changes you have made to it since the last save are lost. You should not type ahead after a file visiting command, because your type-ahead might answer an unexpected question in a way that you would regret. If you are sure you only want to look at a file, and not change it, you can use the C-X C-R command to visit it, instead of C-X C-V. If a file was visited with C-X C-.R, EMACS does not offer to save it when you visit the next file. It assumes the changes were inadvertent. However, you can still save the tile with C-X C-S. The command C-X G-Q ('11 Do Not Write File) can be used to switch between these two policies on saving. With no argument, it says that the file should not be saved it another is visited. With an argument, it says that the file should be saved.
If EMACS is about to save a file automatically an(l discovers that the text is now a lot shorter than it used to be, it tells you so and asks for confirmation (Y or N). It you aren't sure what to answer (because you are surprised that it has shrunk), type C-G to aborl everything, and take a look at your buffer.
Sometimes you will change a buffer by accident. Even if you undo the change (perhaps, rub out the character you inserted). EMACS still knows that "the buffer has been changed". You can fell EMACS to forget about that with the Meta-- (-R Buffer Not Modlihed) command. This command simply clears the "modified" flag which says that the buffer contains changes which need to be saved. It is up to you not to use it unwisely. If we take "-"to mean "not", then Meta-- is "not" metalied.
If there are still people using EDIT or SOS on your machine, you may have to visit files with line numbers in them. The fiuMction Strip SOS Line Numbers removes all line numbers from the current buffer. It also removes all null (t@) characters. An explicit argument inhibits removal of nulls unless the tile actually has line numbers.
What if you want to create a fife? Just visit it. EMACS prints "(New File)" but otherwise acts unworried. If you make any changes and save them, the file is created.
If you visit a nonexistent file unintentionally (because you typed the wrong file name),
visit the file you meant. If you didn't "change" the nonexistent file (you never inserted anything in it), it is not created.
It EMACS is about to save a file and sees that the date of the latest version on disk does not match what EMACS last read or wrote, EMACS notifies you of this fact, and asks what to do, bc,.ause this probably means that something is wrong. For example, someone else may have been editing the same file. If this is so, there is a good chance that your work or his work will be lost if you don't take the proper steps. You

K

File Handling

59

should first find out exactly what is going on. The C-X C-D command to list the directory will help. If you determine that someone else has modified the file, save your file under different names (or at least making a new version) and then SRCCOM the two files to merge the two sets of changes. Also get in touch with the other person so that he doesn't continue editing.
13.2. How to Undo Drastic Changes to a File
If you have made extensive changes to a file and then change your mind about them. you can get rid of them by reading in the previous version of the file. To do this, use M-X Revert File. If you have been using Auto Save mode, it reads in tile last version of the visited file or the last auto save file, whichever is more recent.
In Auto Save mode, saving under special Auto Save filenames, then you can ask to revert to the last "real" save, ignoring subsequent auto saves, with C-U M-X Revert File If you are using the style of auto saving which saves under the real filenames, this is not possible.
M XRevert File does not change point, so that if the file was only edited slightly, you will he at appi oximately the same piece of text aflter the Reverl a!; before. If you have made drastic changes, the same value of point in the old file may address a totally diffeient piece of text.
Because M-X Revert File can be a disaster if done by mistake, it asks for confirmation (Y or N) before doing its work. A pre-comma argument can be used to inhibit the request for confirmation when you call the function Revert File from a TECO program, as in 1,M(M.M RevertFile*).
13.3. Auto Save Mode: Protection Against Disasters
In Auto Save mode, EMACS saves your fie from time to time (based on counting your commands) without being asked. Your file is also saved if you stop typing for more than a few minutes when there are changes in the buffer. This prevents you from losing more than a limited amount of work in a disaster. (Another method of protection is the journal file. See section 24.4 (Journals], page 129.).
You can turn auto saving on or off in an individual buffer with M-X Auto Save. In addition, you can have auto saving by defaullt in all buffers by setting the option Auto Save Default. The frequency of saving, and the number of saved versions to keep, can both be specified.
Each time you visit a file, no matter how, auto saving will be on for that file if Auto Save Default is nonzero. However, by giving a nonzero argument to the file-visiting command, you can turn off auto saving for that file only, without changing the default. For example, you might use C-U C-X C-V to do this. Once you have visited a file, you can turn auto saving on or off with M-X Auto Save. Like other minor mode commands, M-X Auto Save turns the mode on with a positive argument, off with a zero or negative argument; with no argument, it toggles. If you start typing a new file into a buffer

60

EMACS Manual for TWENEX Users

without visiting anything, Auto Save mode is initially off, but you can turn it on with M -X Auto Save.
When an auto save happens, "(Auto Save)" is printed in the echo area (On a printing terminal, the bell is rung instead). An error in the process of auto saving prints "(Auto Save Error!)".
Let us suppose that it is timne for an automatic save to be done: where should the file be saved?
Two workable methods have been developed: save the file under the names you have visited, or save it under some special "Auto Save file name". Each solution has its good and bad points. The first one is excellent some of the time, but intolerable the rest of the time. The second is usually acceptable. Auto saving tinder the visited tile's actual names means that You need do nothing special to gobble the auto save file when you need it; and it means that there is no need to worry about interference between two users sharing a directory, as long as they aren't editing the same file at once. However, this method can sometimes have problems:
If you visit a file with G-X C-fl, then you have said you don't want to store under those names.
If you have visited a fixed version, auto saves can't go under that name, because they would clobber the original file.
If you haven't visited a file, there aren't any names to use.
In all these cases, the filenames for auto saving are taken from the variable Auto Save Filenarrnes. It none of those cases apply then it is possible to store auto saves under the visited name. This will be donm3, provided that you turn onl the feature by setting the variable Auto Save Visited File to a nonzero value.
When you want to save your tile "for real", use C-X C-S, as always. C-U C-X C-S is a way to request an "auto" save explicitly. When you are auto saving under the visited filenamnes, there is not much difference between an auto save and a "real" save, except that an auto save will eventually be deleted au tomiatic ally by EMACS a few auto saves later, while a "real" save will be left around forever (at least, Auto Save won't delete it).
When it is time to recover from a system crash by reloading the auto save file, if auto saving was using the visited file names You have nothing special to do. If auto saving was using special Auto Save filenames, read in the last auto save file and then use C-X C-W (Write File) to write i0out in its real location. If you want to use anl auto save file to throw away changes that you don't like, you can use M-X Revert File, which knows how to find the most recent save, permanent or not, under whatever filenames. See section 13,2 [Revert), page 59.
For your protection. if a file has shrunk by more than 30% since the last save, auto saving does not save. Instead it prints a message that the file has shrunk. You can save explicitly if you wish; after that, auto saving will resume.
Although auto saving generates large numbers of files, it does not clog directories, because it cleans up after itself. Only the last Auto Save Max auto save files are kept; as further saves are done, old auto saves are deleted (and expunged). However, files which were not made by auto saving (or by explicitly requested auto-saves with C-U

File Handling

61

C-X C-S) are never deleted in this way. The variable Auto Save Max is initially 2. Changing the value may not take effect in a given bulfer until you turn auto saving off and on in that buffer.
The number of characters of input between auto saves is controlled by the vari-able Auto Save Interval. It is initially 500. Changing this takes effecl immediately.
Auto Save Filenames is usually set up by the default init file to <your directory>_RSV... If you use auto saving inmultipl, buffers a lot, you might want to have a Butter Creation Hook which sets Auto Save Filenames locnlly to a filename based on the buffer name. so that different buffers don't interfere with each other.
13.4. Listing a File Directory
To look at a part of a file directory, use the C-X C-D command (-R Directory Display). With rio argument, it shows you the file you are visiting, and relaled files with the same lirst name. C-U C-X C-D reads a filename from the terminal and shows you the files related to that filename. The filename may contain wildcards.
To see the whole directory in a brief format, use the function%IistFiles, which takes the direclory name as a string argmnenl. The function View Directory prints a verbose listing of a whole directory. These two commands; take a filename as argument, which can include wild cards.
The variable Auto Directory Display can be set to make many file operations display the directory automatically. The variable is normally O making it positive causes write operations such as Write File to display the directory, and making it negative causes read operations such as Insert File or visiting to display it as well. Ihe display is done using the default directory listing function which is kept in the variable Directory Lister. Normally this is the function & Subset Directory that displays only the files related to the current default file.
13.5. Cleaning a File Directory
The normal course of editing constantly creates new versions of files. If you don't eventually delete the old versions, the directory will fill up and further editing will be impossible. EMACS has commands that make it easy to delete the Old versions.
For complete flexibility to delete precisely the files you want to delete, you can use the DIRED package. See section 13.6 IDIRED], page 62, for more details.
M-X Reap File and M-X Clean Dir are more convenient ways to do the usual thing: keep only the two (or other number) most recent versions.
M-X Reap File <file><cr> counts the number of versions of <file). If there are more than two, you are told the names of the recent ones (to be kept) and the names of the older ones (to be deleted), and asked whether to do the deletion (answer Y or N).
Reap File makes a special offer to delete individual files whose extension indicates that they are likely to be temporary. rhe list of temporary names is contained in a

62

EMACS Manual for TWENEX Users

TECO search string in the variable Temp File FN2 List. See section 19.3 [TECO search strings], page 85.
If you give M-X Reap File a null filename argument, or no argument, then it applies to the file you are visiting.
M-X Clean Directory#<dirname> <cr> cleans a whole directory of old versions. Each file in the directory is processed a la M-X Reap File. M-X Clean Dir with a null argument, or no argument, cleans the directory containing tile file you are visiting.
M-X Reap File and M-X Clean Dir call be given a numeric argumnent which specifies how many versions to keep. For example, C-LI 4 M-X Reap File would keep the four most recent versions. I-he default when there is no argument is the value of the variable File Versions Kept, which is initially 2.
To expunge [he files deleted by Reap File or Clean Directory. use M-X Expunge Directoy, which expunges the connected directory. If you wish to expunge some other directory, connect to it first with
M-X Connect to Directory<directoy><password><cr>
You don't have to specify the password if you can connect without one.
13.6. DIRED, the Directory Editor Subsystem
DIRED makes it easy to delete many of the files in a single directory at once. It presents a copy of a listing of the directory, which you can move around in, marking liles for deletion. Wheim you are satisfied, you can tell DIRED to go ahead and delete the marked files.
Invoke DIRED wilh M-X DIRFD to edit the current default directory, or M--X DIPL'-)O<dir><cr> to edit directory <ir). You are then given a list(I of the directory which you can move around in with all the normal EMACS motion commands. Som EMACS commands are made illegal and others do special things, but it's still a recursive editing level which you can exit normally with C-M-Z and abort with C-1.
You can mark a file for deletion by moving to the line describing the lile and typing D, C-D. K, or C-K. The deletion mark is visible as a D at the beginning of the line. Point is moved to the beginning of the next line, so that several D's delete several files. Alternatively. if you give D an argument it marks that many consecutive files. Given a negative argument. it marks the preceding file (or several files) and puts point at the first (in tie buffer) line marked. Most of the DIRED commands (D, U, E, Space) repeat this way with numeric arguments.
If you wish to remove a deletion mark, use the U (for Undelete) command, which is invoke.d like D: it removes tle deletion mark from the current line (or next few lines, if given an argument). [he Rubout command removes the deletion mark from the previous line, moving up to that line. Thus., a Rubout after a D precisely cancels the D.
For extra convenience, Space is made a command similar to C-N. Moving down a line is done so often in DIRED that it deserves to be easy to type. Rubout is often useful simply for moving up.

File Handling

63

If you are not sure whether you want to delete a file, you can examine it by typing E. This enters a recursive editing mode on the file, which you can exit with C-M-Z. The file is not really visited at that time, and you are not allowed to change it. When you exit the recursive editing level, you return to DIRED. The V command is like E but uses View File to look at the file.
When you have marked the files you wish to mark, you can exit DIRED with C-M-Z. If any files were marked for deletion, DIRED lists them in a concise format, several per line. Then DIRED asks for confirmation of the list. You can type "YF-" (Just "Y" won't do) to go ahead and delete them, "N" to return to editing the dir3ctory so you can change the marks, or "X" to give up and delete nothing, No Return character is needed. No other inputs are accepted at this point.
13.6.1. Other DIRED Commands
N finds the next "hog": the next file which has at least three versions (or, more than File Versions Kept).
C calls up SRCCOM as an inferior with the current file in its command line. When you return to EMACS, the cursor moves down a line to the next file.
S sorts the files into a different order. It reads another character to say which order: F for filename (the default), S for size, R for read date, or W for write date.
R does the same sorting as S, but uses the reverse order (small files, older files or end of alphabet first).
H helps you clean up. It marks "old" versions of the current file, and versions with "temporary" second file names, for deletion. You can then use the D and U commands to add and remove marks before deleting the files. The variables File Versions Kept and Temp File FN2 List control which files H picks for deletion. With an argument (C-U H), it does the whole directory instead of just the current file.
? displays a list of the DIRED commands.
13.6.2. Invoking DIRED
There are some other ways to invoke DIRED. The Emacs command C-X D (-R Dired) puts you in DIRED on the directory containing the file you are currently editing. With a numeric argument of 1 (C-U 1 C-X D), only the current file is displayed instead of the whole directory. In combination with the H command this can be useful for cleaning up excess versions of a file after a heavy editing session. With a numeric argument of 4 (C-U C-X D), it asks you for the directory name. Type a directory name' and/or a file name. If you explicitly specify a file name only versions of that file are displayed, otherwise the whole directory is displayed.

64

EMACS Manual for TWENEX Users

13.6.3. Editing the DIRED Buffer Yourself
It is unwise to try to edit the text of the directory listing yourself, without using the special DIRED commands, unless you know what you are doing, since you can confuse DIRED that way. To make it less likely that you will do so accidentally, the sell-inserting characters are all made illegal inside DIRED. However, deleting whole lines at a time is certainly safe. This does not delete the tiles described by those lines; instead, it makes DIRED forget that they are there and thus makes sure they will not be deleted. Thus. M-X Keep LinesO is useful if you wish to delete only files with a FOO in their names. See section 19 (Replacement], page 83.
For more complicated things, you can use the minibuffer. When you call the mimibuffer from within DIRED, you get a perfectly normal one. The special DIRED commands are not present while you are editing in the minibuffer. To mark a file for deletion, replace the space at the beginning of its line with a "D". To remove a mark, replace the "D" with a space.
13.7. Miscellaneous File Operations
EMACS has extended commands for performing many other operations on files. Invoking these commands with C-M-X instead of M-X will allow you to use filename completion on the filename arguments these commands require.
M-X View File# (ile) <cr> allows you to scan or read a file by sequential screenfuls without visiting the file. It enters a subsystem in which you type a Space to see the next screenful or a Backspace to see the previous screenful. Typing anything else exits the command. View File does not visit the file; it does not alter the contents of any buffer. The advantage of View File is that the whole file does not need to be loaded before you can begin reading it. The inability to do anything but page forward or backward is a consequence.
M-X Write File# <file> <cr> writes the contents of the buffer into the file <file>, and then visits that file. It can be thought of as a way of "changing the name" of the file you are visiting. Unlike C-X C-S, Write File saves even if the buffer has not been changed. C-X C-W is another way of getting at this command.
M-X Insert File# (tile> <cr) inserts the contents of (file) into the buffer at point, leaving point unchanged before the contents and mark after them. The current defaults are used for (file), and are updated.
M-X Write Region# (file) <cr> writes the region (the text between point and mark) to the specified file. It does not set the visited filenames. The buffer is not changed.
M-X Append to Fileo (tile> <cr> appends the region to (file). The text is added to the end of <file>.
M-X Prepend to File# (file) <cr> adds the text to the beginning of (file> instead of the end.
M-X Set Visited Filename<file)<cr) changes the name of the file being visited without reading or writing the data in the buffer. M-X Write File is equivalent to this command followed by a C-X C-S.

File Handling

65

M-X Delete File#<file><cr> deletes the file.
M-X Copy File#<old file>*(new file><cr> copies the file.
M-X Rename File#<old name>*(new name>(cr> renames the file.
The default filenames for all of these operations are TECO default filenamnes. Most of these operations also leave the TECO default names set to the file they operated on. The TECO default is not always the same as the file you are visiting. When you visit a file, they start out the same; the commands mentioned above change the TECO default, but do not change the visited filenames. Each buffer has its own TECO default filenames.
The operation of visiting a file is available as a function under the name M-X Visit File#<file>#. In this form, it uses the TECO default as its defaults, though it still sets both the TECO default and the visited filenames.

IIdd

66

EMACS Manual tor TWENEX Users

Using Multiple Buffers

67

Chapter Fourteen Using Multiple Buffers

When we speak of "the buffer", which contains the text you are editing, we have given the impression that there is only one,. In fact, there may be many of them, each with its own body of text. At any time only one buffer can be selecled and available for
editing. but it isn't hard to switch to a different one. Each buffer individually remembers which file it is visiting, what modes are in effect, and whether there are any changes that need saving.

C-X B C-X C-F C-X C-B C-X K

Select or create a buffer. Visit a file in a new buffer. List the existing buffers. Kill a buffer.

Each buffer in EMACS has a single name, which normally doesn't change. A buffer's name can be any length. The name of the currently selected buffer, and the name of the file visited in it, are visible in the mode line when you are at top level. A newly started EMACS has only one buffer, named "Main".
As well as the visited file and the major mode, a buffer can, if ordered to, remember many other things locally, which means, independently of all other buffers. See section 22.3 [Variables], page 109.

14.1. Creating and Selecting Buffers
To create a new buffer, you need only think of a name for it (say, "FOO") and then do C-X B FOO<cr>, which is the command C-X B (Select 3uffer) followed by the name. This makes a new, empty buffer and selects it for editing. The new buffer is not visiting any file, so if you try to save it you will be asked for the filenames to use. Each buffer has its own major mode; the new buffer's major mode is taken from the value of the variable Default Major Mode, or from the major mode of the previously selected buffer if that variable is the null string. Normally this is Fundamental mode.
To return to buffer FOO later after having switched to another, the same command C-X B FOO<cr> is used, since C-X B can tell whether a buffer named FOO exists already or not. It does not matter whether you use upper case or lower case in typing the name of a buffer. C-X B Main<cr> reselects the buffer Main that EMACS started out with. Just C-X B<cr) reselects the previous buffer. Repeated C-X B<cr>'s alternate between the last two buffers selected.

K

4

68

EMACS Manual for TWENEX Users

You can also read a file into its own newly created buffer, all with one command: C-X C-F (Find File), followed by the filename. The first name of the file becomes the buffer name. C-F stands for "Find", because if the specified file already resides in a buffer in your EMACS, that buffer will be reselected. So you need not remember whether you have brought the file in already or not. A buffer created by C-X C-F can be reselected later with C-X B or C-X C-F, whichever you find more convenient. Nonexistent files can be created with C-X C-F just as they can be with C-X C-V.
Sometimes EMACS needs to visit a file as part of some other operation. By default, it visits the file in whatever buffer was selected. If you like to use C-X C-F and multiple hillers, you can tell EMACS to use multiple buflers for implicit visiting by setting the variable TAGS Find File to a nonzero value. I-his causes automatic visiting to be done )y means of C-X C-F instead of C-X C-V. Automatic visiting is done by the TAGS package (See section 21 [TAGS], page 99.) and by invoking EMACS with a filename
@EMACS <filename><cr>
If the bulfer with the same name that C-X C-F wants to use already exists but with the wrong coiitents (often a different file with a similar name), then you are asked what to do. You can type Return meaning go ahead and reuse that buffer for this new file, or you can type another bulfer name to use instead. If C-X C-F does find the file already in a buffer, then it checks to see whether the version on disk is the same as the last version read or wrilten from that buffer, for safety. If they are different, you are warned that someone else may be editing the file, and left with the version which was already in the EMACS. To get the new version from disk instead, use M-X Revert File.
14.2. Using Existing Buffers
io get a list of all the buffers that exist, do C-X C-B (List Buffers). Each buffer's name, major mode, and visited lilenames are printed. A star at the beginning of a line indicates a bufler which contains changes that have not been saved. The number that appears before a buffer's name in a C-X C-B listing is that buffer's buffer number. You can select a buffer by giving its number as a numeric argument to C-X B, which then does not need to read a string from the terminal.
If several buffers have stars, you should save some of them with M-X Save All Files. This finds all the buffers that need saving and asks about each one individually. Saving the buffers this way is much easier and more efficient than selecting each one and typing C-X C-S.
A quick way of glancing at another buffer, faster than selecting it, is to use M-X View Buffer#<buffername)<cr. This displays the contents of the other buffer and lets you move forward and back a screen at a time with Space and Backspace. See section 15 [Display], page 71.
M-X Rename Buffer#<new name><cr> changes the name of the currently selected buffer. If <new name> is the null string, the first filename of the visited file is used as the new name of the buffer.
rhe commands C-X A (-R Append to Buffer) and M-X Insert Buffer can be used to copy text from one buffer to another. See section 9.3 [Copying], page 41.

Using Multiple Buffers

69

14.3. Killing Buffers
Afler you use an EMACS for a while, it may fill up with buffers which you no longer need. Eventually you can reach a point where trying to create any more results in an "URK" error. So whenever it is convenient you should do M-X Kill Some Buffers, which asks about each buffer individually. You can say Y or N to kill it or not. Or you can say Control-R to take a look at it first. This does not actually select the buffer, as the mode line shows. but gives you a recursive editing level in which you can move around and look at things. When you have seen enough to make up your mind, exit the recursive editing level with a C-M-Z and you will be asked the question again. If you say to kill a buffer that needs saving, you will be asked whether it should be saved.
You can kill the buffer FOO by doing C-X K FOO<cr>. You can kill the selected buffer, a common thing to do if you use C-X C-F, by doing C-X K<cr). If you kill the selected buffer, in any way, EMACS asks you which buffer to select instead. Saying just <cr> at that point tells EMACS to choose one reasonably. C-X K runs the function Kill Buffer.

Ii

70

EMACS Manual for TWENEX Users

Controlling the Display

71

Chapter Fifteen Controlling the Display

Since only part of a large file fits on the screen, EMACS tries to show the part that is likely to be interesting. The display control commands allow you to ask to see a
different part of the file.

C-L
C-V M-V M-R C-M-R

Clear and redisplay screen, putting point at a specified vertical position. Scroll forwards (a screen or a few lines).
Scroll backwards. Move point to the text at a given vertical position. Shift the function point is in onto the screen.

The terminal screen is rarely large enough to display all of your file. If the whole buffer doesn't fit on the screen, EMACS shows a contiguous portion of it, containing point. It continues to show approximately the same portion untit point moves outside of it; then EMACS chooses a new portion centered around the new point. This is EMACS's guess as to what you are most interested in seeing. But if the guess is wrong, you can use the display control commands to see a different portion. The finite area of screen through which you can see part of the buffer is called the window, and the choice of where in the buffer to start displaying is also called the window.
The basic display control command is C-L (-R New Window). In its simplest form, with no argument, it clears the screen and tells EMACS to display a portion of the buffer centered around where point is currently located (actually, point is placed 35% of the way down from the top; this percentage is controlled by the flag FS % CENTER+, whose value is the percent of the screen down from the top. See section 22.5 [FS Flags], page 113.).
C-L with a positive argument chooses a new window so as to put point that many lines from the top. An argument of zero puts point on the very top line. Point does not move with respect to the text; rather, the text and point move rigidly on the screen. C-L with a negative argument puts point that many lines from the bottom of the window. For example, C-U -1 C-L puts point on the bottom line, and C-U -5 C-L puts it five lines from the bottom. C-L with an argument does not clear the screen, so that it can move the text on the screen withoul sending it again if the terminal allows that.
C-U C-L is different from C-L with any other sort of argument. It causes just the line containing point to be redisplayed.
The scrolling commands C-V and M-V let you move the whole display up or down a few lines. C-V (-R Next Screen) with an argument shows you that many more lines at

72

EMACS Manual for TWENEX Users

the bottom of the screen, moving the text and point up together as C-L might. C-V with a negative argument shows you more lines at the top of the screen, as does Meta-V (-R Previous Screen) with a positive argument,
To read the buffer a screenful at a time, use the C-V command with no argument. It takes the last two lines at the bottom of the screen and puts them at the top, followed by nearly a whole screenful of lines not visible before. Point is put at the top of the screen. Thus, each C-V shows the "next screenful", except for two lines of overlap to provide continuity. The variable Next Screen Context Lines. if defined, controls how many lines from the bottom of the screen move to the top; the default if the variable is not defined is 2. To move backward, use M-V without in argument, which moves a whole screenful backwards (again with overlap).
Scanning by screenfuls through the buffer for some distance is most conveniently done with the M-X View Buffer command. This command enters a simple subsystem in which Space moves a screenful forward and Backspace moves a screenful backward. The Return character exits, leaving point centered in whatever part of the buffer was visible. Any other character exits and returns point to its former location, and is then executed as a command (unless it is a Rubout, Rubout exits but is not executed). View Buffer can be used to view another buffer by giving the buffer's name as a string argument. In this case. exiling with Return moves point permanently in the other buffer, but does not select it. See section 14 [Buffers], page 67.
You can also scan by screenfuls through a filwehich you have not visited with the M-X View File command. See section 13.7 [Advanced File Commands], page 64.
To scroll the buffer so that the current function or paragraph is positioned conveniently on the screen, use the C-M-R command (^R Reposition Window). This command tries to get as much as possible of the current function or paragraph onto the screen, preferring the beginning to the end, but not moving point off the screen. A "function" in Lisp mode is a defun; otherwise it is defined to be a set of consecutive unindented lines, or a set of consecutive indented lines.
C-L in all its forms changes the position of point on the screen, carrying the text with it. Another command moves point the same way but leaves the text fixed. It is called Meta-R (-R Move to Screen Edge). With no argument, it puts point at the center of the screen. An argument is used to specify the line to put it on, counting from the top if the argument is positive, or from the bottom if it is negative. Thus, Meta-R with an argument of 0 puts the cursor on the top line of the screen. Meta-R never causes any text to move on the screen; it causes point to move with respect to the screen and the text.

I

Two Window Mode

73

Chapter Sixteen Two Window Mode

EMACS allows you to split the screen into two windows and use them to display parts of two files, or two parts of the same file.

C-X 2 C-X 3
C-X 1 C-X 0 C-X 4 C-X ^
C-M-V

Start showing two windows. Show two windows but stay "in" the top one. Show only one window again. Switch to the Other window Find buffer, file or tag in other window. Make this window bigger. Scroll the other window.

The command C-X 2 (-R Two Windows) enters two-window mode. A line of dashes appears across the middle of the screen, dividing the text display area into two halves. Window one, containing the same text as previously occupied the whole screen, fills the top half, while window two fills the bottom halt. The cursor moves to window two. If this is your first entry to two-window mode, window two will contain a new buffer named W2. Otherwise, it will contain the same text it held the last time you looked at it. The mode line will now describe the buffer and file in window two. In two window mode, the mode line always applies to the window you are in.
You can now edit in window two as you wish, while window one remains visible. When you are finished editing or looking at the text in window two, C-X 1 (^R One Wanidndwoiwnd) orewtutwrnosdtiosaopnpee-awrisnduonwtil mthoednee. xtWCin-Xdo2w. one expands to fill the whole screen,

While you are in two window mode you can use C-X 0 (-R Other Window) to switch between the windows. After doing C-X 2, the cursor is in window two. Doing C-X 0 moves the cursor back to window one, to exactly where it was before the C-X 2. The difference between this and doing C-X 1 is that C-X 0 leaves window two visible on the screen. A second C-X 0 moves the cursor back into window two, to where it was before the first C-X 0. And so on...
Often you will be editing one window while using the other just for reference. Then, the command C-M-V (-R Scroll Other Window) is very useful. It scrolls the other window without switching to it and switching back. It scrolls the same way C-V does: with no argument, a whole screen up; with an argument, that many lines up (or down, for a negative argument). With just a minus sign (no digits) as an argument, C-M-V scrolls a whole screenful backwards (what M-V does).
When you are finished using two windows, the C-X 1 command makes window two

74

EMACS Manual for TWENEX Users

vanish. It doesn't matter which window the cursor is in when you do the C-X 1; either way window two vanishes and window one remains. To make window one vanish and window two remain, give C-X 1 an argument.
The C-X 3 (-R View Two Windows) command is like C-X 2 but leaves the cursor in window one. That is, it makes window two appear at the bottom of the screen but leaves the cursor where it was. C-X 2 is equivalent to C-X 3 C-X 0. C-X 3 is equivalent to C-X 2 C-X 0, but C-X 3 is much faster.
M-X Compare Windows compares the text in the two windows. See section 22.2 ILibraries), page 108. Starting from the pointer in each window, it moves both pointers to tile first mi;inatch. The variable Collapse in Comparison, if it exists, should be a string containing all the "insignificant" characters; any string of insignificant characteis matches any other string of those characters. If the variable does not exist, the iiisignicant characters are return, linefeed, space and tab.
If you quit in the middle of Compare Windows, point is advanced in both windows as far as the matching has proceded. As a result, calling Compare Windows again resumes the comparison.
Normally, the screen is divided evenly between the two windows. You can also redistribute the lines between the windows with the C-X - (-1 Grow Window) command. It makes the currently selected window get one line bigger, or as many lines as is specified. With a negative argument, it makes the selected window smaller. The allocation of space to the windows is always remembered and changes only when you give aC-X - command.
After leaving two-window mode, you can still use C-X 0, but the effect is slightly different. Window two does not appear, but whatever was being shown in it appears, ini window one (the whole screen). Whatever buffer used to be in window one is stuck, mnvisi)ly, into window two. Another C-X 0 reverses the effect of the first. For example, if window one shows buffer D and window two shows buffer W2 (the usual case), and only window one is visible, then after a C-X 0 window one shows buffer W2 and window two shows buffer B.
16.1. Multiple Windows and Multiple Buffers
You can view one buffer in both windows. Give C-X 2 an argument as in C-U C-X 2 to go into window two viewing the same buffer as window one. Although the same buffer appears in both windows, they have different values of point, so you can move around in window two while window one continues to show the same text. Then, having found in window two the place you wish to refer to, you can go back to window one with C-X 0 to make your changes. Finally you can do C-X 1 to make window two leave the screen. If you are already in two window mode, C-U C-X 0 switches windows carrying the buffer from the old window to the new one so that both are viewing the same buffer.
Buffers can be selected independently in each window. The C-X B command selects a new buffer in whichever window the cursor is in. The other window's buffer does not change. When you do C-X 2 and window two appears it shows whatever buffer used to be visible in it when it was on the screen last.

S

LA

Two Window Mode

75

If you have the same buffer in both windows, you must beware of trying to visit a different file in one of the windows with C-X C-V, because if you bring a new file into this buffer, it will replace the old file in both windows. To view different files in the two windows again, you must switch buffers in one of the windows first (with C-X B or C-X C-F, perhaps).
A convenient "combination" command for viewing something in the other window is C-X 4 (-R Visit in Other Window). With this command you can ask to see any specified buffer, file or tag in the other window. Follow the C-X 4 with either B and a buffer name, F or C-F and a file name, or T or "." and a tag name (See section 21 [TAGS], page 99.). This switches to the other window and finds there what you specified. If you were previously in one-window mode, two-window mode is entered. C-X 4 B is similar to to C-X 2 C-X B. C-X 4 F is similar to C-X 2 C-X C-F. C-X 4 T is similar to C-X 2 M-Period. The difference is one of efficiency, and also that C-X 4 works equally well if you are already using two windows.

76

EMACS Manual for TWENEX Users

Narrowing

77

Chapter Seventeen Narrowing

Narrowing means focusing in on some portion of the buffer, making the rest temporarily invisible and inaccessible.

C-X N C-X W C-X P

Narrow down to between point and mark. Widen to view the entire buffer. Narrow down to the page point is in.

When you have narrowed down to a part of the buffer, that part appears to be all there is. You can't see the rest, you can't move into it (motion commands won't go outside the visible part), you can't change it in any way. However, it is not gone, and if you save the file all the invisible text will be saved. In addition to sometimes making it easier to concentrate on a single subroutine or paragraph by eliminating clutter, narrowing can be used to restrict the range of operation of a replace command.
The primary narrowing command is C-X N (-R Set Bounds Region). It sets the virtual butter boundaries at point and the mark, so that only what was between them remains visible. Point moves to the top of the now-visible range, and the mark is left at the end, so that the region marked is unchanged.
The way to undo narrowing is to widen with C-X W (-R Set Bounds Full). This makes all text in the buffer accessible again.
Another way to narrow is to narrow to just one page, with C-X P (-R Set Bounds Page). See section 18 [Pages], page 79.
You can get information on what part of the buffer you are narrowed down to using the C-X = command. See section 11.4 [Filling], page 50.
Note that the virtual buffer boundaries are a powerful TECO mechanism used internally in EMACS in many ways. While only the commands described here set them so as you can see, many others set them temporarily using the TECO commands FS VBO and FS VZ+, and restore them before finishing.

I

_

_

-]

.

78

EMAGS Manual for TWENEX Users

".7. ....... " --- "

1.-.-m-. .. . 1. . ..1 -... . . . .. . ... ..-.

.1.9. .. . . .... .... . ,-

.- .'

.....

..

Commands for Manipulating Pages

79

Chapter Eighteen Commands for Manipulating Pages

'' ' l

Files are often thought of as divided into pa.les by the ASCII character formfeed (rL). For example, if a file is printed on a line printer, each page of the file, in this sense, will start on a new page of paper. EMACS has commands for moving over and operating on pages.

C-M-L

Insert formfeed.

C-X C-P
C-X [

Put point and mark around this page (or ancther page). Move point to previous page boundary.

C-X] C-X P C-X L

Move point to next page boundary.
Narrow down to just this (or next) page. Count the lines in this page.

M-X What Page

Print current page and line number.

Most editors make the division of a file into pages extremely important. For example, they may be unable to show more than one page of the file at any time. EMACS treats a formfeed character just like any olher character. It can be inserted with C-Q C-L (or, C-M-L), and deleted with Rbout. Thus, you are free to paginate your file, or not. However, since pages are often meaningful divisions of the file, commands are provided to move over them and operate on them. If you happen to like seeing only one page of the file at a time, you can use the PAGE library. See section 18.1 [PAGE], page 80.
The C-X [ (-R Previous Page) command moves point to the previous page delimiter (actually, to right after it). If point starts out right after a page delimiter, it skips that one and stops at the previous one. A numeric argument serves as a repeat count. The C-X ] (-R Next Page) command moves forward past the next page delimiter.
The command M-X What Page prints the page and line number of the cursor in the echo area. There is a separate command to print this information because it is likely to be slow and should not slow down anything else (The design of TECO is such that it is not possible to know the absolute number of the page you are in, except by scanning through the whole ile counting pages).
The C-X C-P command (-R Mark Page) pL ts point at the beginning of the current page and the mark at the end. The page terminator at the end is included (the mark follows it). That at the front is excluded (point follows it). This command can be followed by a C-W to kill a page which is to be moved elsewhere.
A numeric argument to C-X C-P is used to specify which page to go to, relative to

80

EMACS Manual for TWENEX Users

the current one. Zero means the current page. One means the next page, and -1 means the previous one.
The command C-X P (-R Set Bounds Page) narrows down to just one page. Everything before and after becomes temporarily invisible and inaccessible (See section 17 [Narrowing], page 77.). Use C-X W to undo this. Both page terminators, the preceding one and the following one, are excluded from the visible region. Like C-X C-P, the C-X P command normally selects the current page, but allows you to specify which page explicitly relative to the current one with a numeric argument. Ilowever, when you are already narrowed down to one page, C-X P moves you to the next page (otherwise, it would be a useless no-op). One effect of this quirk is that several C-X P's in a row get first the current page and then successive pages.
Just what delimits pages is controlled by the variable Page Delimiter, which should contain a TECO search string (See section 19.3 [TECO search strings], page 85.) which will match a page separator. Normally, it is a string containing just TL. For an INFO file, it might usefully be changed to t-tLtO"_ , which means that either a t-tL or just a t- (whatever separates INFO nodes) should be a page separator. In any case, page separators are recognized as such only at the beginning of a line. The paragraph commands consider each page boundary a paragraph boundary as well.
The C-X L command (-R Count Lines Page) is good for deciding where to break a page in two. It first prints (in the echo area) the total number of lines in the current page, and then divides it up into those preceding the current line and those following, as in
Page has 96 lines (72+25)
Notice that the sum is off by one; this is correct if point is not at the front of a line.

18.1. Editing Only One Page at a Time

The PAGE library is meant to allow the handling of pages as discrete, often independent units, letting you see only one page at a time, and providing commands to move between pages, split pages and join pages. It contrives to show the number of the page you are looking at in the mode line. You can also ask to see a directory of the pages in the file, or to insert it into the file. This is an extension of and replacement for the facility provided by the C-X P command in standard EMACS. It is an optional library because we do not think it is necessarily an improvement.

The commands in the PAGE library supplant and redefine commands in standard [MACS. Therefore, you cannot use them unless you give the command M-X Load [ ibrary PAGE<cr> explicitly. See section 22.2 [Libraries], page 108.

C-X] C-X [ C-X C-P C-X P C-X J
C-X W

Move to next page. Move to previous page. Move to page by absolute number. Split this page at point. Join this page to the next or previous one.
See the whole file again.

Commands for Manipulating Pages

81

The most fundamental thing to do with PAGE is to go to a specific page. This can be done by givilng the page number as an argument to C-X C-P (-R Goto Page). If you give a number too big, the last page in the file is selected.
For convenience, C-X C-P with no argument when you are looking at the whole file selects the Dage containing point. When you are looking at only one page, C-X C-P with no argument goes to the next page and with a negative argument goes to the previous page.
However, the main commands for moving forward or backward by pages are C-X [
and C-X I (-R Goto Previous Page and -R Goto Next Page). These take a numeric
argument (either sign) and move that many pages.
When you want to go back to viewing the whole file instead of just one page, you can use the C-X W (-R Widen Bounds) command. These are the same characters that you would use in standard EMACS, but they run a different function that knows to remove the page number from the mode line.
The C-S (-R Incremental Search) and C-R (^R Reverse Search) are redefined to widen bounds first and narrow them again afterwards. So you can search through the whole file, but afterward see only the page in which the search ended. In fact, PAGE goes through some trouble to work with whatever search functions you prefer to use, and find them wherever you put them.
To split an existing page, you could insert a tL, but unless you do this while seeing the whole file, PAGE might get confused for a while. A way that is less tricky is to use C-X P (-R Insert Pagemnark) which inserts the page mark, and narrows down to the second of the two pages formed from the old page. To get rid of a page mark without worry, use C-X J (-R Join Next Page). It gets rid of the page mark after the current page; or, with a negative argument, gets rid of the page mark before this page.
A page mark is defined as <CRLF>tL. ilyou set the variable PAGE Flush CRLF to 1, a page mark is <CRLF>)L<CRLF>, which has the effect of making the CRLF at the beginning of each page invisible. This may be desirable for EMACS library source files. You can also specify some other string in place of tL by setting the variable Page Delimiter. If Page Delimiter specifies multiple alternatives, the first alternative is the one PAGE will insert, but all will be recognized.
To see a list of all the pages in the file, each one represented by its first nonempty line, use M-X View Page Directory. It prints out the first non-blank line on each page, preceded by its page number. M-X Insert Page Directory inserts the same directory into the buffer at point. If you give it an argument, it tries to make the whole thing into a comment by putting the Comment Start string at the front of each line and the Comment End string at the end.
If the variable Page Setup Hook exists, PAGE will execute its value as the function for placing PAGE's functions on keys.

82

EMACS Manual for TWENEX Users

~~1

A

___

____ii

Replacement Commands

83

Chapter Nineteen Replacement Commands

Global search-and-replace operations are not used as often in EMACS as they are in other editors, but they are stilprlovided. In addition to the simple Replace operation which is like that found in most editors, there is a Query Replace operation which asks
you, for each occurrence of the pattern, whether to replace it.

19.1. Query Replace

To replace every instance of FOO with BAR, you can do
M-X Replace#FOO4BAR<cr>
Replacement is lone only after point, so if you want to cover the whole buffer you must go to the beginning first. Replacement continues to the end of the buffer, but you can restrict it by narrowing. See section 17 [Narrowing], page 77.
Unless the variable Case Replace is zero, an attempt is made to preserve case; give both FOO and BAR in lower case, and if a particular FOO is found with a capital irilial or all capitalized, the BAR which replaces it will be likewise.
If you give Replace (or Query Replace) an argument, then it insists that the occurrences of FOO be delimited by break characters (or an end of the buffer). So you can find only the word FOO, and not FOO when it is part of FOOBAR.
The string FOO to be replaced is actually a TECO search string, a type of pattern, in which the characters tB, tN, tO, tQ,tX, and t] are special. See section 19.3 [TECO search strings], page 85.
If you are afraid that there may be some FOO's that should not be changed, EMACS can still help you. Use M-X Query ReplaceÂ§FOOOBAR<cr>. This displays each FOO and waits for you to say whether to replace it with a BAR. The things you can type when you are shown a FOO are:

Space Rubout Comma
Altmode

to replace the FOO (preserving case, just like plain Replace,
unless Case Replace is zero). to skip to the next FOO without replacing this one. to replace this FOO and display the result. You are then asked for another input character, except that since the replacement has already been made, Rubout and Space are
equivalent. to exit without doing any more replacements.

84

EMACS Manual for TWENEX Users

Period
C-R C-W

to replace this FOO and then exit.
to replace all remaining FOO's without asking (Replace
actually works by calling Query Replace and pretending that a ! was typed in). to go back to the previous FOO (or, where it was), in case you have made a mistake. This works by jumping to the mark
(Query Replace sets the mark each time it finds a FO0). to enter a recursive editing level, in case the FOG needs to be edited rather than just replaced with a BAR. When you are done, exit the recursive editing level with C-M-Z. to delete the FOG, and then start editing the buffer. When you are finished editing whatever is to replace the FOO, exit the recursive editing level with C-M-Z.

If you type any other character, the Query Replace is exited, and the character executed as a command. To restart the Query Replace, use C-X Altmode which is a command to re-execute the previous minibuffer command or extended command. See section 5 [M-XJ, page 19.

19.1.1. Running Query Replace with the Minibuffer
Meta-% gives you a minibuffer pre-initialized with "MM Query Replace+". This is the easiest way to invoke Query Replace. It also allows you to get Returns and Altmodes into the arguments.
With the minibuffer, Query Replace can be given a precomma argument, which says that the second string argument is actually a TECO program to be executed to perform the replacement, rather than simply a string to replace with.
When you invoke Query Replace from the minibuffer, the character C-] becomes special (because it is special in TECO programs). In order to get a C-] into the search string or the replacement string, you must use two of them. You can also use a C-] to quote an Altmode. In the minibuffer, Return has no syntactic significance, so there is no need for a way to quote it. However, in order to insert any control characters into the arguments, you need to quote them again with C-0. So, to get C-Q C-X into the search string so as to search for a C-X, you have to type C-Q C-Q C-Q C-X.

19.2. Other Search-and-loop Functions
Here are some other functions related to replacement. Their arguments are TECO search strings (See section 19.3 [TECO search strings], page 85.). They all operate from point to the end of the buffer (or where narrowing stops them).
M-X Occur#FCO<cr> which finds all occurrences of FOG after point. It prints each line containing one. With an argument, it prints that many lines before and after each occurrence.
M-X How Many$FOO<cr> types the number of occurrences of FOO after point.

Replacement Commands

85

M-X Keep Lines#FOO<cr> kills all lines after point that don't contain FOO.
M-X Flush LinesOFOO<cr> kills all lines after point that contain FOO.

19.3. TECO Search Strings
The first string argument to Replace and Query Replace is actually a TECO search string. This means that the characters C-X, C-B, C-N, C-0, and C-0 have special meanings. C-X matches any character. C-B matches any "delimiter" character (anything which the word commands consider not part of a word, according to the syntax table. See section 22.4 [Syntax], page 111.). C-N negates what follows, so that C-N A matches anything but A, and C-N C-B matches any non-delimiter. C-0 means "or", so that XYXY C-0 ZZZ matches either XYXY or ZZZ. C-0 can be used more than once in a pattern. C-0 quotes the following character, in case you want to search for one of the special control characters. However, you can't quote an Altmode or a Return in this way because its specialness is at an earlier stage of processing.
Some variables are supposed to have TECO search strings as their values. For example, Page Delimiter is supposed to be a search string to match anything which should start a page. This is so that you can use C-0 to match several alternatives. In the values of such variables, C-B, C-N, C-0, C-Q, C-X and C-1 are special, but Altmode is not. C-B through C-X are quoted with a C-Q, and C-] is quoted with another C-].
The function Apropos and all similar functions actually take TECO search strings as arguments, so you can search for more than one substring at a time. This is useful because doing Apropos on wordt0para is not really slower than searching for just "word" or just "para".

86

EMACS Manual for TWENEX Users

Editing Programs

87

Chapter Twenty Editing Programs

Special features for editing programs include automatic indentation, comment alignment, parenthesis matching, and the ability to move over and kill balanced expressions. Many of these features are parameterized so that they can work for any programming language.
For each language there is a special miljor mode which customizes EMACS slightly to be better suited to editing programs written in that language. These modes sometimes offer special facilities as well.
See section 11.1 [Words], page 45. Moving over words is useful for editing programs as well as text.
See section 11.2 [Paragraphs], page 47. Most programming language major modes define paragraphs to be separated only by blank lines and page boundaries. This makes the paragraph commands useful for editing programs.
See section 21 [Tags], page 99. The TAGS package can remember all the labels or functions in a multi-file program and find any one of them quickly.
20.1. Major Modes
When EMACS starts up, it is in what is called Fundamental mode, which means that the single and double character commands are defined so as to be convenient in general. More precisely, in Fundamental mode every EMACS option is set in its default state. For editing any specific type of text, such as Lisp code or English text, you can tell EMACS to change the meanings of a few commands to become more specifically adapted to the task. This is done by switching from Fundamental mode to one of the other major modes. Most commands remain unchanged; the ones which usually change are Tab, Rubout, and Linefeed. In addition, the commands which handle comments use the mode to determine how comments are to be delimited.
Selecting a new major mode is done with an M-X command. Each major mode is the name of the function to select that mode. Thus, you can enter Lisp mode by executing M-X Lisp (short for M-X Lisp Mode). The major modes are mutually exclusive; you can be in only one major mode at a time. When at top level, EMACS always says in the mode line which major mode you are in. Often EMACS enters the correct major mode for a file simply based on the file's extension, and you do not have to worry about selecting a mode.

88

EMACS Manual for TWENEX Users

You can specify which major mode should be used for editing a certain file by putting -*-<mode name>-*- somewhere in the first nonblank line of the file. For example, this file has -*-Text-*-.
Many major modes redefine the syntactical properties of characters appearing in the bulfer. See section 22.4 ISyntax], page 111.
Most programming language major modes specify that only blank lines separate paragraphs. This is so that the paragraph commands do not become useless. They also cause Auto Fill mode to use the definition of lab to indent the new lines it creates. This is because most lines are usually indented.
Major modes are standardly defined for the languages Lisp, Muddle, MIDAS, FAIL, MACRO-10. Macsyma, BCPL, BLISS, PASCAL, FORTRAN, SAIL, TECO, and PL1.
There is also Text mode, designed for editing English text, or input to text justifier programs. See section 11 [Text], page 45.

20.2. Indentation Commands for Code

Tab Linefeed M-_ M-\ M-M

Indents current line.
Eqtiivak.nt to Return followed by Tab. Joins two lines, leaving one space between if appropriate. Deletes all spaces and tabs around point. Moves to the first nonblank character on the line.

Most programming languages have some indentation convention. For Lisp code, lines are indented according to their nesting in parentheses. For assembler code, almost all lines start with a single tab, but some have one or more spaces as well. Indenting TECO code is an art rather than a science, but it is often useful to indent a line under the previous one.
The way to request indentation is with the Tab command. Each major mode defines this command to perform the sort of indentation appropriate for the particular language. In Lisp mode. Tab aligns the line according to its depth in parentheses. No matter where in the line you are when you type Tab, it aligns the line as a whole. In MIDAS mode, Tab inserts a tab, that being the standard indentation for assembly code. In TECO mode, Tab realigns the current line to match a previous line. PLi mode (See the file INFO:EPL1 .INFO.) knows in great detail about the keywords of the language so as to indent lines according to the nesting structure.
The command Linefeed (^R Indent New Line) does a Return and then does a Tab on the next line. Thus, Linefeed at the end of the line makes a following blank line and supplies it with the usual amount of indentation, just as Return would make an empty line. Linefeed in the middle of a line breaks the line and supplies the usual indentation in front of the new line.
The inverse of Linefeed is Meta-- or C-M-^ (^R Delete Indentation). This command deletes the indentation at the front of the current line, and the line boundary as well. They are replaced by a single space, or by no space if before a ")" or after a "(", or at the beginning of a line. -o delete just the indentation of a line, go to the beginning of

Editing Programs

89

the line and use Meta-\ (-R Delete Horizontal Space), which deletes all spaces and tabs around the cursor.
To insert an indented line before the current one, do C-A, C-0, and then Tab. To make an indented line after the current one, use C-E Linefeed.
To move over the indentation on a line, do Meta-M or C-M-M ("P Back to Indentation). These commands, given anywhere on a line, position the cursor at the fitst nonblank character on the line.
20.3. Automatic Display Of Matching Parentheses
The purpose of the EMACS parenthesis-matching feature is to show automatically how parentheses balance in text being typed in. When this feature is enabled, after a close parenthesis or other close bracket character is inserted the cursor automatically moves for an instant to the open which balances the newly inserted character. The cursor stays at the open pareflthef;is for a second before returning home, if you don't type auly mOre c1nn0Comnds durilng that time. It you type mote commands before the sk!Conid is up, MACS won't wait the whole second.
It is worth emphasizing that the location of point, the place where your type- in will be insertedI, is not affected by the parenthesis match rIng feature. It stays alter the close parenthesis, where it would normally he. Only the cursor on the screen moves away and back. You can type ahead freely as if the matching feature were iot there. In fact. if you type fast enough, you won't see the cursor move. You must pause after typing a close parenthesis to see the open parenthesis.
The variable Display Matching Paren controls parenthesis display. If it is zero, the feature is disabled. If the variable is nonzero, then its absolute value is the number of seconds for the cursor to stay at the open parenthesis before coming back to its real location. The sign of the variable is also significant: if it is negative, then the open parenthesis is shown only if it is already on the screen. If the variable is positive, then EMACS will actually recenter tile window to show the text around the open parenthesis. The default setting of the variable is -1.
An additional parameter is whether EMACS should warn you by ringing the bell if you type an unmatched close parenthesis. The default is to warn you if you are editing a language in which parentheses are essential, like Lisp, but not to do so for languages in which parentheses are riot so crucial. This is controlled by the variable Permit Unmatched Paren. When it is 1, you are never warned (they are always "permitted"). When it is -1, you are warned only in Lisp mode and similar modes (this is the default). Note that these modes operate by locally setting the variable to 1 if it was -1. When it is 0, you are warned regardless of the major mode. Unmatched parens are always "permitted" in that EMACS will never refuse to insert them.
While this feature was intended primarily for Lisp, it can be used just as well for any other language, and it is not dependent on what major mode you are in. It is expected that you wouldn't want it in Text mode, so Text mode sets the variable Display Matching Paren locally to zero. If you do want the feature in Text mode, you can create a Text Mode Hook variable which sets the variable back to -1. See the file

.Blow

AO-A093 886 MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTE--ETC FG 9/2

.huuuuuuuuInI EMACS MANUAL FOR TWENEX USERS.(U) SEP 80 R M STALLMAN UNCLASSIFIED AI-M-555

NOOO S75-C-O143 ML

Immuuuuuuuum

E~lllhEllEEE-

EIIIIIIIIIIIIu

IIIEIIIIIIIII

IEEEIIIIIIEEEE

mlllEEEElllllE

90

EMACS Manual for TWENEX Users

INFO:CONV.INFO. node [looks, for more mo on [ext Mode Hook. The way to control which characters trigger this feature is with the syntax table. Any character whose Lisp syntax is ")"will cause the matching character with syntax "("to be shown. Most major modes automatically set up the syntax table (See section 22.4 [Syntax], page 111.).
The syntax table also controls what is lone with the case of "mismatched" parens, as in "[ ). The third slot in a close parenthesis character's syntax table entry should be file proper matching open parenthesis character, if you want this feature turned on. II that slot contains a space instead, then any open parenthesis character is consiclered a legitimate match. If a close parenthesis is mismatched, it is inserted as always, but it insgs the bell.
The implementation of this feature uses the TECO flag FS -R PAREN,. See section 22.5 [FS Flagsi, page 113.

20.4. Manipulating Comments

The comment commands insert, kill and align comments. There are also commands for moving through existing code and inserting comments.

C-; M-; C-M-; Return C-.X M-N
M-P M-J M-Lineteed

Insert or align comment. The same. Kill comment. Move past comment terninator and onto new line. Set comment colimn. Move to Next line and insert comment.
Move to Previous line and insert comment. Continue a comment on a new line. The same.

The command that creates a comment is Control-; or Meta-; (-R Indent for Comment). It moves to the end of the line, indents to the comment column, and inserts whatever string EMACS believes comments are supposed to start with (normally ";"). If the line goes past the comment column, then the indentation is done to a suitable boundary (usually, a multiple of 8).
Control-: can also be used to align an existing comment. If a line already contains the string that starts comments, then C-; lust moves point after it and indents it to the right place (where a comment would have been created if there had been none).

Even when an existing comment is properly aligned, C-; is still useful for moving directly to the start of the comment.
Some languages require an explicit comment terminator, which is not simply the end of the line. Although the language may then allow comments in thme middle of the line, the EMACS comment commands assume that a comment is the last thing on the line. When there is a comment terminator, C-; inserts the terminator as well as the starter, and leaves point between them, so that you are ready to insert the text of the comment. When you are done, the Return command given immediately before the comment terminator acts as if it were at the end of the line already: it moves down to

Editing Programs

91

or creates a following blank line. It does not break the existing line before the comment terminator as you would expect.
C-M-; (-R Kill Comment) kills the comment on the current line, if there is one. The indentation before the start of the comment is killed as well. If there does not appear to be a comment in the line, nothing is done. Since killed text can be reinserted with C- Y, this command is useful for moving a cormert from one line to another.
20.4.1. Multiple Lines of Comments
If you wish to align a large number of comments, you can give Control-; an argument and it indents what comments exist on that many lines, creating none. Point is left after the last line processed (unlike the no-argjument case).
When adding comments to a long stretch of existing code, the commands M-N (-R Down Comment Line) and M-P (^R Up Comment Line) may be useful. They are like C-N and C-P except that they do a C-: automatically on each line as you move to it, and delete any empty comment from tho line as you leave it. Thus, you can use M-N to move down through the code, puttill ted into the comments when you want to, and allowing the comments that you den't lill imi to be removed because they remained empty.
If you are typing a comment and find that you wish to continue it oni another line, you can use the command Meta-J or Meta Lineleed (-R Indent New Comment Line), which terminates the comment you are typing, creates or gobbles a new blank line, and begins a new comment indented under the old one. When Auto Fill mode is on, going past the fill column while typing a comment causes the comment to be continued in just this fashion. Note that if the next line is not blank, a blank line is created, instead Of putting the next line of the comment on the next line of code. To do that, use M-N.
20.4.2. Double and Triple Semicolons in Lisp
In Lisp code there are conventions for comments which start with more than one semicolon. Comments which start with two semicolons are indented as if they were lines of code, instead of at the comment column. Comments which start with three semicolons are supposed to start at the left margin. EMACS understands these conventions by indenting a doublo-senicolon comment using Tab, and by not changing the indentation of a triple-semicolon comment at all. (Actually, this rule applies whenever the comment starter is a single character and is duplicated). Note that the ATSIGN program considers a four-semicolon comment a subtitle in Lisp code.
20.4.3. Options Controlling Comments
The comment column is stored in the variable Comment Column. You can set it to a number explicitly. Alternatively, the command C-X ; (-R Set Comment Column) sets the comment colunmn to the column point is at. C-U C-X ; sets the comment column to match the last comment before point in the buffer, and then does a Meta-; to align the current line's comment under the previous one.

